#BlueJ class context
comment0.target=BlockingDeque
comment0.text=\r\n\ A\ {@link\ Deque}\ that\ additionally\ supports\ blocking\ operations\ that\ wait\r\n\ for\ the\ deque\ to\ become\ non-empty\ when\ retrieving\ an\ element,\ and\ wait\ for\r\n\ space\ to\ become\ available\ in\ the\ deque\ when\ storing\ an\ element.\r\n\r\n\ <p><tt>BlockingDeque</tt>\ methods\ come\ in\ four\ forms,\ with\ different\ ways\r\n\ of\ handling\ operations\ that\ cannot\ be\ satisfied\ immediately,\ but\ may\ be\r\n\ satisfied\ at\ some\ point\ in\ the\ future\:\r\n\ one\ throws\ an\ exception,\ the\ second\ returns\ a\ special\ value\ (either\r\n\ <tt>null</tt>\ or\ <tt>false</tt>,\ depending\ on\ the\ operation),\ the\ third\r\n\ blocks\ the\ current\ thread\ indefinitely\ until\ the\ operation\ can\ succeed,\r\n\ and\ the\ fourth\ blocks\ for\ only\ a\ given\ maximum\ time\ limit\ before\ giving\r\n\ up.\ \ These\ methods\ are\ summarized\ in\ the\ following\ table\:\r\n\r\n\ <p>\r\n\ <table\ BORDER\ CELLPADDING\=3\ CELLSPACING\=1>\r\n\ \ <tr>\r\n\ \ \ \ <td\ ALIGN\=CENTER\ COLSPAN\ \=\ 5>\ <b>First\ Element\ (Head)</b></td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Throws\ exception</em></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Special\ value</em></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Blocks</em></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Times\ out</em></td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td><b>Insert</b></td>\r\n\ \ \ \ <td>{@link\ \#addFirst\ addFirst(e)}</td>\r\n\ \ \ \ <td>{@link\ \#offerFirst(Object)\ offerFirst(e)}</td>\r\n\ \ \ \ <td>{@link\ \#putFirst\ putFirst(e)}</td>\r\n\ \ \ \ <td>{@link\ \#offerFirst(Object,\ long,\ TimeUnit)\ offerFirst(e,\ time,\ unit)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td><b>Remove</b></td>\r\n\ \ \ \ <td>{@link\ \#removeFirst\ removeFirst()}</td>\r\n\ \ \ \ <td>{@link\ \#pollFirst\ pollFirst()}</td>\r\n\ \ \ \ <td>{@link\ \#takeFirst\ takeFirst()}</td>\r\n\ \ \ \ <td>{@link\ \#pollFirst(long,\ TimeUnit)\ pollFirst(time,\ unit)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td><b>Examine</b></td>\r\n\ \ \ \ <td>{@link\ \#getFirst\ getFirst()}</td>\r\n\ \ \ \ <td>{@link\ \#peekFirst\ peekFirst()}</td>\r\n\ \ \ \ <td><em>not\ applicable</em></td>\r\n\ \ \ \ <td><em>not\ applicable</em></td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td\ ALIGN\=CENTER\ COLSPAN\ \=\ 5>\ <b>Last\ Element\ (Tail)</b></td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Throws\ exception</em></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Special\ value</em></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Blocks</em></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Times\ out</em></td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td><b>Insert</b></td>\r\n\ \ \ \ <td>{@link\ \#addLast\ addLast(e)}</td>\r\n\ \ \ \ <td>{@link\ \#offerLast(Object)\ offerLast(e)}</td>\r\n\ \ \ \ <td>{@link\ \#putLast\ putLast(e)}</td>\r\n\ \ \ \ <td>{@link\ \#offerLast(Object,\ long,\ TimeUnit)\ offerLast(e,\ time,\ unit)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td><b>Remove</b></td>\r\n\ \ \ \ <td>{@link\ \#removeLast()\ removeLast()}</td>\r\n\ \ \ \ <td>{@link\ \#pollLast()\ pollLast()}</td>\r\n\ \ \ \ <td>{@link\ \#takeLast\ takeLast()}</td>\r\n\ \ \ \ <td>{@link\ \#pollLast(long,\ TimeUnit)\ pollLast(time,\ unit)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td><b>Examine</b></td>\r\n\ \ \ \ <td>{@link\ \#getLast\ getLast()}</td>\r\n\ \ \ \ <td>{@link\ \#peekLast\ peekLast()}</td>\r\n\ \ \ \ <td><em>not\ applicable</em></td>\r\n\ \ \ \ <td><em>not\ applicable</em></td>\r\n\ \ </tr>\r\n\ </table>\r\n\r\n\ <p>Like\ any\ {@link\ BlockingQueue},\ a\ <tt>BlockingDeque</tt>\ is\ thread\ safe,\r\n\ does\ not\ permit\ null\ elements,\ and\ may\ (or\ may\ not)\ be\r\n\ capacity-constrained.\r\n\r\n\ <p>A\ <tt>BlockingDeque</tt>\ implementation\ may\ be\ used\ directly\ as\ a\ FIFO\r\n\ <tt>BlockingQueue</tt>.\ The\ methods\ inherited\ from\ the\r\n\ <tt>BlockingQueue</tt>\ interface\ are\ precisely\ equivalent\ to\r\n\ <tt>BlockingDeque</tt>\ methods\ as\ indicated\ in\ the\ following\ table\:\r\n\r\n\ <p>\r\n\ <table\ BORDER\ CELLPADDING\=3\ CELLSPACING\=1>\r\n\ \ <tr>\r\n\ \ \ \ <td\ ALIGN\=CENTER>\ <b><tt>BlockingQueue</tt>\ Method</b></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER>\ <b>Equivalent\ <tt>BlockingDeque</tt>\ Method</b></td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td\ ALIGN\=CENTER\ COLSPAN\ \=\ 2>\ <b>Insert</b></td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td>{@link\ \#add(Object)\ add(e)}</td>\r\n\ \ \ \ <td>{@link\ \#addLast(Object)\ addLast(e)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td>{@link\ \#offer(Object)\ offer(e)}</td>\r\n\ \ \ \ <td>{@link\ \#offerLast(Object)\ offerLast(e)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td>{@link\ \#put(Object)\ put(e)}</td>\r\n\ \ \ \ <td>{@link\ \#putLast(Object)\ putLast(e)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td>{@link\ \#offer(Object,\ long,\ TimeUnit)\ offer(e,\ time,\ unit)}</td>\r\n\ \ \ \ <td>{@link\ \#offerLast(Object,\ long,\ TimeUnit)\ offerLast(e,\ time,\ unit)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td\ ALIGN\=CENTER\ COLSPAN\ \=\ 2>\ <b>Remove</b></td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td>{@link\ \#remove()\ remove()}</td>\r\n\ \ \ \ <td>{@link\ \#removeFirst()\ removeFirst()}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td>{@link\ \#poll()\ poll()}</td>\r\n\ \ \ \ <td>{@link\ \#pollFirst()\ pollFirst()}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td>{@link\ \#take()\ take()}</td>\r\n\ \ \ \ <td>{@link\ \#takeFirst()\ takeFirst()}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td>{@link\ \#poll(long,\ TimeUnit)\ poll(time,\ unit)}</td>\r\n\ \ \ \ <td>{@link\ \#pollFirst(long,\ TimeUnit)\ pollFirst(time,\ unit)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td\ ALIGN\=CENTER\ COLSPAN\ \=\ 2>\ <b>Examine</b></td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td>{@link\ \#element()\ element()}</td>\r\n\ \ \ \ <td>{@link\ \#getFirst()\ getFirst()}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td>{@link\ \#peek()\ peek()}</td>\r\n\ \ \ \ <td>{@link\ \#peekFirst()\ peekFirst()}</td>\r\n\ \ </tr>\r\n\ </table>\r\n\r\n\ <p>Memory\ consistency\ effects\:\ As\ with\ other\ concurrent\r\n\ collections,\ actions\ in\ a\ thread\ prior\ to\ placing\ an\ object\ into\ a\r\n\ {@code\ BlockingDeque}\r\n\ <a\ href\="package-summary.html\#MemoryVisibility"><i>happen-before</i></a>\r\n\ actions\ subsequent\ to\ the\ access\ or\ removal\ of\ that\ element\ from\r\n\ the\ {@code\ BlockingDeque}\ in\ another\ thread.\r\n\r\n\ <p>This\ interface\ is\ a\ member\ of\ the\r\n\ <a\ href\="{@docRoot}/../technotes/guides/collections/index.html">\r\n\ Java\ Collections\ Framework</a>.\r\n\r\n\ @since\ 1.6\r\n\ @author\ Doug\ Lea\r\n\ @param\ <E>\ the\ type\ of\ elements\ held\ in\ this\ collection\r\n
comment1.params=e
comment1.target=void\ addFirst(java.lang.Object)
comment1.text=\r\n\ Inserts\ the\ specified\ element\ at\ the\ front\ of\ this\ deque\ if\ it\ is\r\n\ possible\ to\ do\ so\ immediately\ without\ violating\ capacity\ restrictions,\r\n\ throwing\ an\ <tt>IllegalStateException</tt>\ if\ no\ space\ is\ currently\r\n\ available.\ \ When\ using\ a\ capacity-restricted\ deque,\ it\ is\ generally\r\n\ preferable\ to\ use\ {@link\ \#offerFirst(Object)\ offerFirst}.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @throws\ IllegalStateException\ {@inheritDoc}\r\n\ @throws\ ClassCastException\ {@inheritDoc}\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ {@inheritDoc}\r\n
comment10.params=
comment10.target=java.lang.Object\ takeLast()
comment10.text=\r\n\ Retrieves\ and\ removes\ the\ last\ element\ of\ this\ deque,\ waiting\r\n\ if\ necessary\ until\ an\ element\ becomes\ available.\r\n\r\n\ @return\ the\ tail\ of\ this\ deque\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n
comment11.params=timeout\ unit
comment11.target=java.lang.Object\ pollFirst(long,\ java.util.concurrent.TimeUnit)
comment11.text=\r\n\ Retrieves\ and\ removes\ the\ first\ element\ of\ this\ deque,\ waiting\r\n\ up\ to\ the\ specified\ wait\ time\ if\ necessary\ for\ an\ element\ to\r\n\ become\ available.\r\n\r\n\ @param\ timeout\ how\ long\ to\ wait\ before\ giving\ up,\ in\ units\ of\r\n\ \ \ \ \ \ \ \ <tt>unit</tt>\r\n\ @param\ unit\ a\ <tt>TimeUnit</tt>\ determining\ how\ to\ interpret\ the\r\n\ \ \ \ \ \ \ \ <tt>timeout</tt>\ parameter\r\n\ @return\ the\ head\ of\ this\ deque,\ or\ <tt>null</tt>\ if\ the\ specified\r\n\ \ \ \ \ \ \ \ \ waiting\ time\ elapses\ before\ an\ element\ is\ available\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n
comment12.params=timeout\ unit
comment12.target=java.lang.Object\ pollLast(long,\ java.util.concurrent.TimeUnit)
comment12.text=\r\n\ Retrieves\ and\ removes\ the\ last\ element\ of\ this\ deque,\ waiting\r\n\ up\ to\ the\ specified\ wait\ time\ if\ necessary\ for\ an\ element\ to\r\n\ become\ available.\r\n\r\n\ @param\ timeout\ how\ long\ to\ wait\ before\ giving\ up,\ in\ units\ of\r\n\ \ \ \ \ \ \ \ <tt>unit</tt>\r\n\ @param\ unit\ a\ <tt>TimeUnit</tt>\ determining\ how\ to\ interpret\ the\r\n\ \ \ \ \ \ \ \ <tt>timeout</tt>\ parameter\r\n\ @return\ the\ tail\ of\ this\ deque,\ or\ <tt>null</tt>\ if\ the\ specified\r\n\ \ \ \ \ \ \ \ \ waiting\ time\ elapses\ before\ an\ element\ is\ available\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n
comment13.params=o
comment13.target=boolean\ removeFirstOccurrence(java.lang.Object)
comment13.text=\r\n\ Removes\ the\ first\ occurrence\ of\ the\ specified\ element\ from\ this\ deque.\r\n\ If\ the\ deque\ does\ not\ contain\ the\ element,\ it\ is\ unchanged.\r\n\ More\ formally,\ removes\ the\ first\ element\ <tt>e</tt>\ such\ that\r\n\ <tt>o.equals(e)</tt>\ (if\ such\ an\ element\ exists).\r\n\ Returns\ <tt>true</tt>\ if\ this\ deque\ contained\ the\ specified\ element\r\n\ (or\ equivalently,\ if\ this\ deque\ changed\ as\ a\ result\ of\ the\ call).\r\n\r\n\ @param\ o\ element\ to\ be\ removed\ from\ this\ deque,\ if\ present\r\n\ @return\ <tt>true</tt>\ if\ an\ element\ was\ removed\ as\ a\ result\ of\ this\ call\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ is\ incompatible\ with\ this\ deque\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n
comment14.params=o
comment14.target=boolean\ removeLastOccurrence(java.lang.Object)
comment14.text=\r\n\ Removes\ the\ last\ occurrence\ of\ the\ specified\ element\ from\ this\ deque.\r\n\ If\ the\ deque\ does\ not\ contain\ the\ element,\ it\ is\ unchanged.\r\n\ More\ formally,\ removes\ the\ last\ element\ <tt>e</tt>\ such\ that\r\n\ <tt>o.equals(e)</tt>\ (if\ such\ an\ element\ exists).\r\n\ Returns\ <tt>true</tt>\ if\ this\ deque\ contained\ the\ specified\ element\r\n\ (or\ equivalently,\ if\ this\ deque\ changed\ as\ a\ result\ of\ the\ call).\r\n\r\n\ @param\ o\ element\ to\ be\ removed\ from\ this\ deque,\ if\ present\r\n\ @return\ <tt>true</tt>\ if\ an\ element\ was\ removed\ as\ a\ result\ of\ this\ call\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ is\ incompatible\ with\ this\ deque\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n
comment15.params=e
comment15.target=boolean\ add(java.lang.Object)
comment15.text=\r\n\ Inserts\ the\ specified\ element\ into\ the\ queue\ represented\ by\ this\ deque\r\n\ (in\ other\ words,\ at\ the\ tail\ of\ this\ deque)\ if\ it\ is\ possible\ to\ do\ so\r\n\ immediately\ without\ violating\ capacity\ restrictions,\ returning\r\n\ <tt>true</tt>\ upon\ success\ and\ throwing\ an\r\n\ <tt>IllegalStateException</tt>\ if\ no\ space\ is\ currently\ available.\r\n\ When\ using\ a\ capacity-restricted\ deque,\ it\ is\ generally\ preferable\ to\r\n\ use\ {@link\ \#offer(Object)\ offer}.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\ {@link\ \#addLast(Object)\ addLast}.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @throws\ IllegalStateException\ {@inheritDoc}\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n
comment16.params=e
comment16.target=boolean\ offer(java.lang.Object)
comment16.text=\r\n\ Inserts\ the\ specified\ element\ into\ the\ queue\ represented\ by\ this\ deque\r\n\ (in\ other\ words,\ at\ the\ tail\ of\ this\ deque)\ if\ it\ is\ possible\ to\ do\ so\r\n\ immediately\ without\ violating\ capacity\ restrictions,\ returning\r\n\ <tt>true</tt>\ upon\ success\ and\ <tt>false</tt>\ if\ no\ space\ is\ currently\r\n\ available.\ \ When\ using\ a\ capacity-restricted\ deque,\ this\ method\ is\r\n\ generally\ preferable\ to\ the\ {@link\ \#add}\ method,\ which\ can\ fail\ to\r\n\ insert\ an\ element\ only\ by\ throwing\ an\ exception.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\ {@link\ \#offerLast(Object)\ offerLast}.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n
comment17.params=e
comment17.target=void\ put(java.lang.Object)
comment17.text=\r\n\ Inserts\ the\ specified\ element\ into\ the\ queue\ represented\ by\ this\ deque\r\n\ (in\ other\ words,\ at\ the\ tail\ of\ this\ deque),\ waiting\ if\ necessary\ for\r\n\ space\ to\ become\ available.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\ {@link\ \#putLast(Object)\ putLast}.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @throws\ InterruptedException\ {@inheritDoc}\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n
comment18.params=e\ timeout\ unit
comment18.target=boolean\ offer(java.lang.Object,\ long,\ java.util.concurrent.TimeUnit)
comment18.text=\r\n\ Inserts\ the\ specified\ element\ into\ the\ queue\ represented\ by\ this\ deque\r\n\ (in\ other\ words,\ at\ the\ tail\ of\ this\ deque),\ waiting\ up\ to\ the\r\n\ specified\ wait\ time\ if\ necessary\ for\ space\ to\ become\ available.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\r\n\ {@link\ \#offerLast(Object,long,TimeUnit)\ offerLast}.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @return\ <tt>true</tt>\ if\ the\ element\ was\ added\ to\ this\ deque,\ else\r\n\ \ \ \ \ \ \ \ \ <tt>false</tt>\r\n\ @throws\ InterruptedException\ {@inheritDoc}\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n
comment19.params=
comment19.target=java.lang.Object\ remove()
comment19.text=\r\n\ Retrieves\ and\ removes\ the\ head\ of\ the\ queue\ represented\ by\ this\ deque\r\n\ (in\ other\ words,\ the\ first\ element\ of\ this\ deque).\r\n\ This\ method\ differs\ from\ {@link\ \#poll\ poll}\ only\ in\ that\ it\r\n\ throws\ an\ exception\ if\ this\ deque\ is\ empty.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\ {@link\ \#removeFirst()\ removeFirst}.\r\n\r\n\ @return\ the\ head\ of\ the\ queue\ represented\ by\ this\ deque\r\n\ @throws\ NoSuchElementException\ if\ this\ deque\ is\ empty\r\n
comment2.params=e
comment2.target=void\ addLast(java.lang.Object)
comment2.text=\r\n\ Inserts\ the\ specified\ element\ at\ the\ end\ of\ this\ deque\ if\ it\ is\r\n\ possible\ to\ do\ so\ immediately\ without\ violating\ capacity\ restrictions,\r\n\ throwing\ an\ <tt>IllegalStateException</tt>\ if\ no\ space\ is\ currently\r\n\ available.\ \ When\ using\ a\ capacity-restricted\ deque,\ it\ is\ generally\r\n\ preferable\ to\ use\ {@link\ \#offerLast(Object)\ offerLast}.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @throws\ IllegalStateException\ {@inheritDoc}\r\n\ @throws\ ClassCastException\ {@inheritDoc}\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ {@inheritDoc}\r\n
comment20.params=
comment20.target=java.lang.Object\ poll()
comment20.text=\r\n\ Retrieves\ and\ removes\ the\ head\ of\ the\ queue\ represented\ by\ this\ deque\r\n\ (in\ other\ words,\ the\ first\ element\ of\ this\ deque),\ or\ returns\r\n\ <tt>null</tt>\ if\ this\ deque\ is\ empty.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\ {@link\ \#pollFirst()}.\r\n\r\n\ @return\ the\ head\ of\ this\ deque,\ or\ <tt>null</tt>\ if\ this\ deque\ is\ empty\r\n
comment21.params=
comment21.target=java.lang.Object\ take()
comment21.text=\r\n\ Retrieves\ and\ removes\ the\ head\ of\ the\ queue\ represented\ by\ this\ deque\r\n\ (in\ other\ words,\ the\ first\ element\ of\ this\ deque),\ waiting\ if\r\n\ necessary\ until\ an\ element\ becomes\ available.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\ {@link\ \#takeFirst()\ takeFirst}.\r\n\r\n\ @return\ the\ head\ of\ this\ deque\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n
comment22.params=timeout\ unit
comment22.target=java.lang.Object\ poll(long,\ java.util.concurrent.TimeUnit)
comment22.text=\r\n\ Retrieves\ and\ removes\ the\ head\ of\ the\ queue\ represented\ by\ this\ deque\r\n\ (in\ other\ words,\ the\ first\ element\ of\ this\ deque),\ waiting\ up\ to\ the\r\n\ specified\ wait\ time\ if\ necessary\ for\ an\ element\ to\ become\ available.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\r\n\ {@link\ \#pollFirst(long,TimeUnit)\ pollFirst}.\r\n\r\n\ @return\ the\ head\ of\ this\ deque,\ or\ <tt>null</tt>\ if\ the\r\n\ \ \ \ \ \ \ \ \ specified\ waiting\ time\ elapses\ before\ an\ element\ is\ available\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n
comment23.params=
comment23.target=java.lang.Object\ element()
comment23.text=\r\n\ Retrieves,\ but\ does\ not\ remove,\ the\ head\ of\ the\ queue\ represented\ by\r\n\ this\ deque\ (in\ other\ words,\ the\ first\ element\ of\ this\ deque).\r\n\ This\ method\ differs\ from\ {@link\ \#peek\ peek}\ only\ in\ that\ it\ throws\ an\r\n\ exception\ if\ this\ deque\ is\ empty.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\ {@link\ \#getFirst()\ getFirst}.\r\n\r\n\ @return\ the\ head\ of\ this\ deque\r\n\ @throws\ NoSuchElementException\ if\ this\ deque\ is\ empty\r\n
comment24.params=
comment24.target=java.lang.Object\ peek()
comment24.text=\r\n\ Retrieves,\ but\ does\ not\ remove,\ the\ head\ of\ the\ queue\ represented\ by\r\n\ this\ deque\ (in\ other\ words,\ the\ first\ element\ of\ this\ deque),\ or\r\n\ returns\ <tt>null</tt>\ if\ this\ deque\ is\ empty.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\ {@link\ \#peekFirst()\ peekFirst}.\r\n\r\n\ @return\ the\ head\ of\ this\ deque,\ or\ <tt>null</tt>\ if\ this\ deque\ is\ empty\r\n
comment25.params=o
comment25.target=boolean\ remove(java.lang.Object)
comment25.text=\r\n\ Removes\ the\ first\ occurrence\ of\ the\ specified\ element\ from\ this\ deque.\r\n\ If\ the\ deque\ does\ not\ contain\ the\ element,\ it\ is\ unchanged.\r\n\ More\ formally,\ removes\ the\ first\ element\ <tt>e</tt>\ such\ that\r\n\ <tt>o.equals(e)</tt>\ (if\ such\ an\ element\ exists).\r\n\ Returns\ <tt>true</tt>\ if\ this\ deque\ contained\ the\ specified\ element\r\n\ (or\ equivalently,\ if\ this\ deque\ changed\ as\ a\ result\ of\ the\ call).\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\r\n\ {@link\ \#removeFirstOccurrence(Object)\ removeFirstOccurrence}.\r\n\r\n\ @param\ o\ element\ to\ be\ removed\ from\ this\ deque,\ if\ present\r\n\ @return\ <tt>true</tt>\ if\ this\ deque\ changed\ as\ a\ result\ of\ the\ call\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ is\ incompatible\ with\ this\ deque\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n
comment26.params=o
comment26.target=boolean\ contains(java.lang.Object)
comment26.text=\r\n\ Returns\ <tt>true</tt>\ if\ this\ deque\ contains\ the\ specified\ element.\r\n\ More\ formally,\ returns\ <tt>true</tt>\ if\ and\ only\ if\ this\ deque\ contains\r\n\ at\ least\ one\ element\ <tt>e</tt>\ such\ that\ <tt>o.equals(e)</tt>.\r\n\r\n\ @param\ o\ object\ to\ be\ checked\ for\ containment\ in\ this\ deque\r\n\ @return\ <tt>true</tt>\ if\ this\ deque\ contains\ the\ specified\ element\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ is\ incompatible\ with\ this\ deque\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n
comment27.params=
comment27.target=int\ size()
comment27.text=\r\n\ Returns\ the\ number\ of\ elements\ in\ this\ deque.\r\n\r\n\ @return\ the\ number\ of\ elements\ in\ this\ deque\r\n
comment28.params=
comment28.target=java.util.Iterator\ iterator()
comment28.text=\r\n\ Returns\ an\ iterator\ over\ the\ elements\ in\ this\ deque\ in\ proper\ sequence.\r\n\ The\ elements\ will\ be\ returned\ in\ order\ from\ first\ (head)\ to\ last\ (tail).\r\n\r\n\ @return\ an\ iterator\ over\ the\ elements\ in\ this\ deque\ in\ proper\ sequence\r\n
comment29.params=e
comment29.target=void\ push(java.lang.Object)
comment29.text=\r\n\ Pushes\ an\ element\ onto\ the\ stack\ represented\ by\ this\ deque.\ \ In\ other\r\n\ words,\ inserts\ the\ element\ at\ the\ front\ of\ this\ deque\ unless\ it\ would\r\n\ violate\ capacity\ restrictions.\r\n\r\n\ <p>This\ method\ is\ equivalent\ to\ {@link\ \#addFirst(Object)\ addFirst}.\r\n\r\n\ @throws\ IllegalStateException\ {@inheritDoc}\r\n\ @throws\ ClassCastException\ {@inheritDoc}\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ {@inheritDoc}\r\n
comment3.params=e
comment3.target=boolean\ offerFirst(java.lang.Object)
comment3.text=\r\n\ Inserts\ the\ specified\ element\ at\ the\ front\ of\ this\ deque\ if\ it\ is\r\n\ possible\ to\ do\ so\ immediately\ without\ violating\ capacity\ restrictions,\r\n\ returning\ <tt>true</tt>\ upon\ success\ and\ <tt>false</tt>\ if\ no\ space\ is\r\n\ currently\ available.\r\n\ When\ using\ a\ capacity-restricted\ deque,\ this\ method\ is\ generally\r\n\ preferable\ to\ the\ {@link\ \#addFirst(Object)\ addFirst}\ method,\ which\ can\r\n\ fail\ to\ insert\ an\ element\ only\ by\ throwing\ an\ exception.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @throws\ ClassCastException\ {@inheritDoc}\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ {@inheritDoc}\r\n
comment4.params=e
comment4.target=boolean\ offerLast(java.lang.Object)
comment4.text=\r\n\ Inserts\ the\ specified\ element\ at\ the\ end\ of\ this\ deque\ if\ it\ is\r\n\ possible\ to\ do\ so\ immediately\ without\ violating\ capacity\ restrictions,\r\n\ returning\ <tt>true</tt>\ upon\ success\ and\ <tt>false</tt>\ if\ no\ space\ is\r\n\ currently\ available.\r\n\ When\ using\ a\ capacity-restricted\ deque,\ this\ method\ is\ generally\r\n\ preferable\ to\ the\ {@link\ \#addLast(Object)\ addLast}\ method,\ which\ can\r\n\ fail\ to\ insert\ an\ element\ only\ by\ throwing\ an\ exception.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @throws\ ClassCastException\ {@inheritDoc}\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ {@inheritDoc}\r\n
comment5.params=e
comment5.target=void\ putFirst(java.lang.Object)
comment5.text=\r\n\ Inserts\ the\ specified\ element\ at\ the\ front\ of\ this\ deque,\r\n\ waiting\ if\ necessary\ for\ space\ to\ become\ available.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n
comment6.params=e
comment6.target=void\ putLast(java.lang.Object)
comment6.text=\r\n\ Inserts\ the\ specified\ element\ at\ the\ end\ of\ this\ deque,\r\n\ waiting\ if\ necessary\ for\ space\ to\ become\ available.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n
comment7.params=e\ timeout\ unit
comment7.target=boolean\ offerFirst(java.lang.Object,\ long,\ java.util.concurrent.TimeUnit)
comment7.text=\r\n\ Inserts\ the\ specified\ element\ at\ the\ front\ of\ this\ deque,\r\n\ waiting\ up\ to\ the\ specified\ wait\ time\ if\ necessary\ for\ space\ to\r\n\ become\ available.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @param\ timeout\ how\ long\ to\ wait\ before\ giving\ up,\ in\ units\ of\r\n\ \ \ \ \ \ \ \ <tt>unit</tt>\r\n\ @param\ unit\ a\ <tt>TimeUnit</tt>\ determining\ how\ to\ interpret\ the\r\n\ \ \ \ \ \ \ \ <tt>timeout</tt>\ parameter\r\n\ @return\ <tt>true</tt>\ if\ successful,\ or\ <tt>false</tt>\ if\r\n\ \ \ \ \ \ \ \ \ the\ specified\ waiting\ time\ elapses\ before\ space\ is\ available\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n
comment8.params=e\ timeout\ unit
comment8.target=boolean\ offerLast(java.lang.Object,\ long,\ java.util.concurrent.TimeUnit)
comment8.text=\r\n\ Inserts\ the\ specified\ element\ at\ the\ end\ of\ this\ deque,\r\n\ waiting\ up\ to\ the\ specified\ wait\ time\ if\ necessary\ for\ space\ to\r\n\ become\ available.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @param\ timeout\ how\ long\ to\ wait\ before\ giving\ up,\ in\ units\ of\r\n\ \ \ \ \ \ \ \ <tt>unit</tt>\r\n\ @param\ unit\ a\ <tt>TimeUnit</tt>\ determining\ how\ to\ interpret\ the\r\n\ \ \ \ \ \ \ \ <tt>timeout</tt>\ parameter\r\n\ @return\ <tt>true</tt>\ if\ successful,\ or\ <tt>false</tt>\ if\r\n\ \ \ \ \ \ \ \ \ the\ specified\ waiting\ time\ elapses\ before\ space\ is\ available\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ deque\r\n
comment9.params=
comment9.target=java.lang.Object\ takeFirst()
comment9.text=\r\n\ Retrieves\ and\ removes\ the\ first\ element\ of\ this\ deque,\ waiting\r\n\ if\ necessary\ until\ an\ element\ becomes\ available.\r\n\r\n\ @return\ the\ head\ of\ this\ deque\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n
numComments=30
