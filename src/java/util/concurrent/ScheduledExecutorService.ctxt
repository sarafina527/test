#BlueJ class context
comment0.target=ScheduledExecutorService
comment0.text=\r\n\ An\ {@link\ ExecutorService}\ that\ can\ schedule\ commands\ to\ run\ after\ a\ given\r\n\ delay,\ or\ to\ execute\ periodically.\r\n\r\n\ <p>\ The\ <tt>schedule</tt>\ methods\ create\ tasks\ with\ various\ delays\r\n\ and\ return\ a\ task\ object\ that\ can\ be\ used\ to\ cancel\ or\ check\r\n\ execution.\ The\ <tt>scheduleAtFixedRate</tt>\ and\r\n\ <tt>scheduleWithFixedDelay</tt>\ methods\ create\ and\ execute\ tasks\r\n\ that\ run\ periodically\ until\ cancelled.\r\n\r\n\ <p>\ Commands\ submitted\ using\ the\ {@link\ Executor\#execute}\ and\r\n\ {@link\ ExecutorService}\ <tt>submit</tt>\ methods\ are\ scheduled\ with\r\n\ a\ requested\ delay\ of\ zero.\ Zero\ and\ negative\ delays\ (but\ not\r\n\ periods)\ are\ also\ allowed\ in\ <tt>schedule</tt>\ methods,\ and\ are\r\n\ treated\ as\ requests\ for\ immediate\ execution.\r\n\r\n\ <p>All\ <tt>schedule</tt>\ methods\ accept\ <em>relative</em>\ delays\ and\r\n\ periods\ as\ arguments,\ not\ absolute\ times\ or\ dates.\ It\ is\ a\ simple\r\n\ matter\ to\ transform\ an\ absolute\ time\ represented\ as\ a\ {@link\r\n\ java.util.Date}\ to\ the\ required\ form.\ For\ example,\ to\ schedule\ at\r\n\ a\ certain\ future\ <tt>date</tt>,\ you\ can\ use\:\ <tt>schedule(task,\r\n\ date.getTime()\ -\ System.currentTimeMillis(),\r\n\ TimeUnit.MILLISECONDS)</tt>.\ Beware\ however\ that\ expiration\ of\ a\r\n\ relative\ delay\ need\ not\ coincide\ with\ the\ current\ <tt>Date</tt>\ at\r\n\ which\ the\ task\ is\ enabled\ due\ to\ network\ time\ synchronization\r\n\ protocols,\ clock\ drift,\ or\ other\ factors.\r\n\r\n\ The\ {@link\ Executors}\ class\ provides\ convenient\ factory\ methods\ for\r\n\ the\ ScheduledExecutorService\ implementations\ provided\ in\ this\ package.\r\n\r\n\ <h3>Usage\ Example</h3>\r\n\r\n\ Here\ is\ a\ class\ with\ a\ method\ that\ sets\ up\ a\ ScheduledExecutorService\r\n\ to\ beep\ every\ ten\ seconds\ for\ an\ hour\:\r\n\r\n\ \ <pre>\ {@code\r\n\ import\ static\ java.util.concurrent.TimeUnit.*;\r\n\ class\ BeeperControl\ {\r\n\ \ \ private\ final\ ScheduledExecutorService\ scheduler\ \=\r\n\ \ \ \ \ Executors.newScheduledThreadPool(1);\r\n\r\n\ \ \ public\ void\ beepForAnHour()\ {\r\n\ \ \ \ \ final\ Runnable\ beeper\ \=\ new\ Runnable()\ {\r\n\ \ \ \ \ \ \ public\ void\ run()\ {\ System.out.println("beep");\ }\r\n\ \ \ \ \ };\r\n\ \ \ \ \ final\ ScheduledFuture<?>\ beeperHandle\ \=\r\n\ \ \ \ \ \ \ scheduler.scheduleAtFixedRate(beeper,\ 10,\ 10,\ SECONDS);\r\n\ \ \ \ \ scheduler.schedule(new\ Runnable()\ {\r\n\ \ \ \ \ \ \ public\ void\ run()\ {\ beeperHandle.cancel(true);\ }\r\n\ \ \ \ \ },\ 60\ *\ 60,\ SECONDS);\r\n\ \ \ }\r\n\ }}</pre>\r\n\r\n\ @since\ 1.5\r\n\ @author\ Doug\ Lea\r\n
comment1.params=command\ delay\ unit
comment1.target=java.util.concurrent.ScheduledFuture\ schedule(java.lang.Runnable,\ long,\ java.util.concurrent.TimeUnit)
comment1.text=\r\n\ Creates\ and\ executes\ a\ one-shot\ action\ that\ becomes\ enabled\r\n\ after\ the\ given\ delay.\r\n\r\n\ @param\ command\ the\ task\ to\ execute\r\n\ @param\ delay\ the\ time\ from\ now\ to\ delay\ execution\r\n\ @param\ unit\ the\ time\ unit\ of\ the\ delay\ parameter\r\n\ @return\ a\ ScheduledFuture\ representing\ pending\ completion\ of\r\n\ \ \ \ \ \ \ \ \ the\ task\ and\ whose\ <tt>get()</tt>\ method\ will\ return\r\n\ \ \ \ \ \ \ \ \ <tt>null</tt>\ upon\ completion\r\n\ @throws\ RejectedExecutionException\ if\ the\ task\ cannot\ be\r\n\ \ \ \ \ \ \ \ \ scheduled\ for\ execution\r\n\ @throws\ NullPointerException\ if\ command\ is\ null\r\n
comment2.params=callable\ delay\ unit
comment2.target=java.util.concurrent.ScheduledFuture\ schedule(java.util.concurrent.Callable,\ long,\ java.util.concurrent.TimeUnit)
comment2.text=\r\n\ Creates\ and\ executes\ a\ ScheduledFuture\ that\ becomes\ enabled\ after\ the\r\n\ given\ delay.\r\n\r\n\ @param\ callable\ the\ function\ to\ execute\r\n\ @param\ delay\ the\ time\ from\ now\ to\ delay\ execution\r\n\ @param\ unit\ the\ time\ unit\ of\ the\ delay\ parameter\r\n\ @return\ a\ ScheduledFuture\ that\ can\ be\ used\ to\ extract\ result\ or\ cancel\r\n\ @throws\ RejectedExecutionException\ if\ the\ task\ cannot\ be\r\n\ \ \ \ \ \ \ \ \ scheduled\ for\ execution\r\n\ @throws\ NullPointerException\ if\ callable\ is\ null\r\n
comment3.params=command\ initialDelay\ period\ unit
comment3.target=java.util.concurrent.ScheduledFuture\ scheduleAtFixedRate(java.lang.Runnable,\ long,\ long,\ java.util.concurrent.TimeUnit)
comment3.text=\r\n\ Creates\ and\ executes\ a\ periodic\ action\ that\ becomes\ enabled\ first\r\n\ after\ the\ given\ initial\ delay,\ and\ subsequently\ with\ the\ given\r\n\ period;\ that\ is\ executions\ will\ commence\ after\r\n\ <tt>initialDelay</tt>\ then\ <tt>initialDelay+period</tt>,\ then\r\n\ <tt>initialDelay\ +\ 2\ *\ period</tt>,\ and\ so\ on.\r\n\ If\ any\ execution\ of\ the\ task\r\n\ encounters\ an\ exception,\ subsequent\ executions\ are\ suppressed.\r\n\ Otherwise,\ the\ task\ will\ only\ terminate\ via\ cancellation\ or\r\n\ termination\ of\ the\ executor.\ \ If\ any\ execution\ of\ this\ task\r\n\ takes\ longer\ than\ its\ period,\ then\ subsequent\ executions\r\n\ may\ start\ late,\ but\ will\ not\ concurrently\ execute.\r\n\r\n\ @param\ command\ the\ task\ to\ execute\r\n\ @param\ initialDelay\ the\ time\ to\ delay\ first\ execution\r\n\ @param\ period\ the\ period\ between\ successive\ executions\r\n\ @param\ unit\ the\ time\ unit\ of\ the\ initialDelay\ and\ period\ parameters\r\n\ @return\ a\ ScheduledFuture\ representing\ pending\ completion\ of\r\n\ \ \ \ \ \ \ \ \ the\ task,\ and\ whose\ <tt>get()</tt>\ method\ will\ throw\ an\r\n\ \ \ \ \ \ \ \ \ exception\ upon\ cancellation\r\n\ @throws\ RejectedExecutionException\ if\ the\ task\ cannot\ be\r\n\ \ \ \ \ \ \ \ \ scheduled\ for\ execution\r\n\ @throws\ NullPointerException\ if\ command\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ period\ less\ than\ or\ equal\ to\ zero\r\n
comment4.params=command\ initialDelay\ delay\ unit
comment4.target=java.util.concurrent.ScheduledFuture\ scheduleWithFixedDelay(java.lang.Runnable,\ long,\ long,\ java.util.concurrent.TimeUnit)
comment4.text=\r\n\ Creates\ and\ executes\ a\ periodic\ action\ that\ becomes\ enabled\ first\r\n\ after\ the\ given\ initial\ delay,\ and\ subsequently\ with\ the\r\n\ given\ delay\ between\ the\ termination\ of\ one\ execution\ and\ the\r\n\ commencement\ of\ the\ next.\ \ If\ any\ execution\ of\ the\ task\r\n\ encounters\ an\ exception,\ subsequent\ executions\ are\ suppressed.\r\n\ Otherwise,\ the\ task\ will\ only\ terminate\ via\ cancellation\ or\r\n\ termination\ of\ the\ executor.\r\n\r\n\ @param\ command\ the\ task\ to\ execute\r\n\ @param\ initialDelay\ the\ time\ to\ delay\ first\ execution\r\n\ @param\ delay\ the\ delay\ between\ the\ termination\ of\ one\r\n\ execution\ and\ the\ commencement\ of\ the\ next\r\n\ @param\ unit\ the\ time\ unit\ of\ the\ initialDelay\ and\ delay\ parameters\r\n\ @return\ a\ ScheduledFuture\ representing\ pending\ completion\ of\r\n\ \ \ \ \ \ \ \ \ the\ task,\ and\ whose\ <tt>get()</tt>\ method\ will\ throw\ an\r\n\ \ \ \ \ \ \ \ \ exception\ upon\ cancellation\r\n\ @throws\ RejectedExecutionException\ if\ the\ task\ cannot\ be\r\n\ \ \ \ \ \ \ \ \ scheduled\ for\ execution\r\n\ @throws\ NullPointerException\ if\ command\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ delay\ less\ than\ or\ equal\ to\ zero\r\n
numComments=5
