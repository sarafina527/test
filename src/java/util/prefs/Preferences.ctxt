#BlueJ class context
comment0.target=Preferences
comment0.text=\r\n\ A\ node\ in\ a\ hierarchical\ collection\ of\ preference\ data.\ \ This\ class\r\n\ allows\ applications\ to\ store\ and\ retrieve\ user\ and\ system\r\n\ preference\ and\ configuration\ data.\ \ This\ data\ is\ stored\r\n\ persistently\ in\ an\ implementation-dependent\ backing\ store.\ \ Typical\r\n\ implementations\ include\ flat\ files,\ OS-specific\ registries,\r\n\ directory\ servers\ and\ SQL\ databases.\ \ The\ user\ of\ this\ class\ needn't\r\n\ be\ concerned\ with\ details\ of\ the\ backing\ store.\r\n\r\n\ <p>There\ are\ two\ separate\ trees\ of\ preference\ nodes,\ one\ for\ user\r\n\ preferences\ and\ one\ for\ system\ preferences.\ \ Each\ user\ has\ a\ separate\ user\r\n\ preference\ tree,\ and\ all\ users\ in\ a\ given\ system\ share\ the\ same\ system\r\n\ preference\ tree.\ \ The\ precise\ description\ of\ "user"\ and\ "system"\ will\ vary\r\n\ from\ implementation\ to\ implementation.\ \ Typical\ information\ stored\ in\ the\r\n\ user\ preference\ tree\ might\ include\ font\ choice,\ color\ choice,\ or\ preferred\r\n\ window\ location\ and\ size\ for\ a\ particular\ application.\ \ Typical\ information\r\n\ stored\ in\ the\ system\ preference\ tree\ might\ include\ installation\r\n\ configuration\ data\ for\ an\ application.\r\n\r\n\ <p>Nodes\ in\ a\ preference\ tree\ are\ named\ in\ a\ similar\ fashion\ to\r\n\ directories\ in\ a\ hierarchical\ file\ system.\ \ \ Every\ node\ in\ a\ preference\r\n\ tree\ has\ a\ <i>node\ name</i>\ (which\ is\ not\ necessarily\ unique),\r\n\ a\ unique\ <i>absolute\ path\ name</i>,\ and\ a\ path\ name\ <i>relative</i>\ to\ each\r\n\ ancestor\ including\ itself.\r\n\r\n\ <p>The\ root\ node\ has\ a\ node\ name\ of\ the\ empty\ string\ ("").\ \ Every\ other\r\n\ node\ has\ an\ arbitrary\ node\ name,\ specified\ at\ the\ time\ it\ is\ created.\ \ The\r\n\ only\ restrictions\ on\ this\ name\ are\ that\ it\ cannot\ be\ the\ empty\ string,\ and\r\n\ it\ cannot\ contain\ the\ slash\ character\ ('/').\r\n\r\n\ <p>The\ root\ node\ has\ an\ absolute\ path\ name\ of\ <tt>"/"</tt>.\ \ Children\ of\r\n\ the\ root\ node\ have\ absolute\ path\ names\ of\ <tt>"/"\ +\ </tt><i>&lt;node\r\n\ name&gt;</i>.\ \ All\ other\ nodes\ have\ absolute\ path\ names\ of\ <i>&lt;parent's\r\n\ absolute\ path\ name&gt;</i><tt>\ +\ "/"\ +\ </tt><i>&lt;node\ name&gt;</i>.\r\n\ Note\ that\ all\ absolute\ path\ names\ begin\ with\ the\ slash\ character.\r\n\r\n\ <p>A\ node\ <i>n</i>'s\ path\ name\ relative\ to\ its\ ancestor\ <i>a</i>\r\n\ is\ simply\ the\ string\ that\ must\ be\ appended\ to\ <i>a</i>'s\ absolute\ path\ name\r\n\ in\ order\ to\ form\ <i>n</i>'s\ absolute\ path\ name,\ with\ the\ initial\ slash\r\n\ character\ (if\ present)\ removed.\ \ Note\ that\:\r\n\ <ul>\r\n\ <li>No\ relative\ path\ names\ begin\ with\ the\ slash\ character.\r\n\ <li>Every\ node's\ path\ name\ relative\ to\ itself\ is\ the\ empty\ string.\r\n\ <li>Every\ node's\ path\ name\ relative\ to\ its\ parent\ is\ its\ node\ name\ (except\r\n\ for\ the\ root\ node,\ which\ does\ not\ have\ a\ parent).\r\n\ <li>Every\ node's\ path\ name\ relative\ to\ the\ root\ is\ its\ absolute\ path\ name\r\n\ with\ the\ initial\ slash\ character\ removed.\r\n\ </ul>\r\n\r\n\ <p>Note\ finally\ that\:\r\n\ <ul>\r\n\ <li>No\ path\ name\ contains\ multiple\ consecutive\ slash\ characters.\r\n\ <li>No\ path\ name\ with\ the\ exception\ of\ the\ root's\ absolute\ path\ name\r\n\ ends\ in\ the\ slash\ character.\r\n\ <li>Any\ string\ that\ conforms\ to\ these\ two\ rules\ is\ a\ valid\ path\ name.\r\n\ </ul>\r\n\r\n\ <p>All\ of\ the\ methods\ that\ modify\ preferences\ data\ are\ permitted\ to\ operate\r\n\ asynchronously;\ they\ may\ return\ immediately,\ and\ changes\ will\ eventually\r\n\ propagate\ to\ the\ persistent\ backing\ store\ with\ an\ implementation-dependent\r\n\ delay.\ \ The\ <tt>flush</tt>\ method\ may\ be\ used\ to\ synchronously\ force\r\n\ updates\ to\ the\ backing\ store.\ \ Normal\ termination\ of\ the\ Java\ Virtual\r\n\ Machine\ will\ <i>not</i>\ result\ in\ the\ loss\ of\ pending\ updates\ --\ an\ explicit\r\n\ <tt>flush</tt>\ invocation\ is\ <i>not</i>\ required\ upon\ termination\ to\ ensure\r\n\ that\ pending\ updates\ are\ made\ persistent.\r\n\r\n\ <p>All\ of\ the\ methods\ that\ read\ preferences\ from\ a\ <tt>Preferences</tt>\r\n\ object\ require\ the\ invoker\ to\ provide\ a\ default\ value.\ \ The\ default\ value\ is\r\n\ returned\ if\ no\ value\ has\ been\ previously\ set\ <i>or\ if\ the\ backing\ store\ is\r\n\ unavailable</i>.\ \ The\ intent\ is\ to\ allow\ applications\ to\ operate,\ albeit\r\n\ with\ slightly\ degraded\ functionality,\ even\ if\ the\ backing\ store\ becomes\r\n\ unavailable.\ \ Several\ methods,\ like\ <tt>flush</tt>,\ have\ semantics\ that\r\n\ prevent\ them\ from\ operating\ if\ the\ backing\ store\ is\ unavailable.\ \ Ordinary\r\n\ applications\ should\ have\ no\ need\ to\ invoke\ any\ of\ these\ methods,\ which\ can\r\n\ be\ identified\ by\ the\ fact\ that\ they\ are\ declared\ to\ throw\ {@link\r\n\ BackingStoreException}.\r\n\r\n\ <p>The\ methods\ in\ this\ class\ may\ be\ invoked\ concurrently\ by\ multiple\ threads\r\n\ in\ a\ single\ JVM\ without\ the\ need\ for\ external\ synchronization,\ and\ the\r\n\ results\ will\ be\ equivalent\ to\ some\ serial\ execution.\ \ If\ this\ class\ is\ used\r\n\ concurrently\ <i>by\ multiple\ JVMs</i>\ that\ store\ their\ preference\ data\ in\r\n\ the\ same\ backing\ store,\ the\ data\ store\ will\ not\ be\ corrupted,\ but\ no\r\n\ other\ guarantees\ are\ made\ concerning\ the\ consistency\ of\ the\ preference\r\n\ data.\r\n\r\n\ <p>This\ class\ contains\ an\ export/import\ facility,\ allowing\ preferences\r\n\ to\ be\ "exported"\ to\ an\ XML\ document,\ and\ XML\ documents\ representing\r\n\ preferences\ to\ be\ "imported"\ back\ into\ the\ system.\ \ This\ facility\r\n\ may\ be\ used\ to\ back\ up\ all\ or\ part\ of\ a\ preference\ tree,\ and\r\n\ subsequently\ restore\ from\ the\ backup.\r\n\r\n\ <p>The\ XML\ document\ has\ the\ following\ DOCTYPE\ declaration\:\r\n\ <pre>\r\n\ &lt;\!DOCTYPE\ preferences\ SYSTEM\ "http\://java.sun.com/dtd/preferences.dtd"&gt;\r\n\ </pre>\r\n\ Note\ that\ the\ system\ URI\ (http\://java.sun.com/dtd/preferences.dtd)\ is\r\n\ <i>not</i>\ accessed\ when\ exporting\ or\ importing\ preferences;\ it\ merely\r\n\ serves\ as\ a\ string\ to\ uniquely\ identify\ the\ DTD,\ which\ is\:\r\n\ <pre>\r\n\ \ \ \ &lt;?xml\ version\="1.0"\ encoding\="UTF-8"?&gt;\r\n\r\n\ \ \ \ &lt;\!--\ DTD\ for\ a\ Preferences\ tree.\ --&gt;\r\n\r\n\ \ \ \ &lt;\!--\ The\ preferences\ element\ is\ at\ the\ root\ of\ an\ XML\ document\r\n\ \ \ \ \ \ \ \ \ representing\ a\ Preferences\ tree.\ --&gt;\r\n\ \ \ \ &lt;\!ELEMENT\ preferences\ (root)&gt;\r\n\r\n\ \ \ \ &lt;\!--\ The\ preferences\ element\ contains\ an\ optional\ version\ attribute,\r\n\ \ \ \ \ \ \ \ \ \ which\ specifies\ version\ of\ DTD.\ --&gt;\r\n\ \ \ \ &lt;\!ATTLIST\ preferences\ EXTERNAL_XML_VERSION\ CDATA\ "0.0"\ &gt\r\n\r\n\ \ \ \ &lt;\!--\ The\ root\ element\ has\ a\ map\ representing\ the\ root's\ preferences\r\n\ \ \ \ \ \ \ \ \ (if\ any),\ and\ one\ node\ for\ each\ child\ of\ the\ root\ (if\ any).\ --&gt;\r\n\ \ \ \ &lt;\!ELEMENT\ root\ (map,\ node*)\ &gt;\r\n\r\n\ \ \ \ &lt;\!--\ Additionally,\ the\ root\ contains\ a\ type\ attribute,\ which\r\n\ \ \ \ \ \ \ \ \ specifies\ whether\ it's\ the\ system\ or\ user\ root.\ --&gt;\r\n\ \ \ \ &lt;\!ATTLIST\ root\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ type\ (system|user)\ \#REQUIRED\ &gt;\r\n\r\n\ \ \ \ &lt;\!--\ Each\ node\ has\ a\ map\ representing\ its\ preferences\ (if\ any),\r\n\ \ \ \ \ \ \ \ \ and\ one\ node\ for\ each\ child\ (if\ any).\ --&gt;\r\n\ \ \ \ &lt;\!ELEMENT\ node\ (map,\ node*)\ &gt;\r\n\r\n\ \ \ \ &lt;\!--\ Additionally,\ each\ node\ has\ a\ name\ attribute\ --&gt;\r\n\ \ \ \ &lt;\!ATTLIST\ node\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ name\ CDATA\ \#REQUIRED\ &gt;\r\n\r\n\ \ \ \ &lt;\!--\ A\ map\ represents\ the\ preferences\ stored\ at\ a\ node\ (if\ any).\ --&gt;\r\n\ \ \ \ &lt;\!ELEMENT\ map\ (entry*)\ &gt;\r\n\r\n\ \ \ \ &lt;\!--\ An\ entry\ represents\ a\ single\ preference,\ which\ is\ simply\r\n\ \ \ \ \ \ \ \ \ \ a\ key-value\ pair.\ --&gt;\r\n\ \ \ \ &lt;\!ELEMENT\ entry\ EMPTY\ &gt;\r\n\ \ \ \ &lt;\!ATTLIST\ entry\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ key\ \ \ CDATA\ \#REQUIRED\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ value\ CDATA\ \#REQUIRED\ &gt;\r\n\ </pre>\r\n\r\n\ Every\ <tt>Preferences</tt>\ implementation\ must\ have\ an\ associated\ {@link\r\n\ PreferencesFactory}\ implementation.\ \ Every\ Java(TM)\ SE\ implementation\ must\ provide\r\n\ some\ means\ of\ specifying\ which\ <tt>PreferencesFactory</tt>\ implementation\r\n\ is\ used\ to\ generate\ the\ root\ preferences\ nodes.\ \ This\ allows\ the\r\n\ administrator\ to\ replace\ the\ default\ preferences\ implementation\ with\ an\r\n\ alternative\ implementation.\r\n\r\n\ <p>Implementation\ note\:\ In\ Sun's\ JRE,\ the\ <tt>PreferencesFactory</tt>\r\n\ implementation\ is\ located\ as\ follows\:\r\n\r\n\ <ol>\r\n\r\n\ <li><p>If\ the\ system\ property\r\n\ <tt>java.util.prefs.PreferencesFactory</tt>\ is\ defined,\ then\ it\ is\r\n\ taken\ to\ be\ the\ fully-qualified\ name\ of\ a\ class\ implementing\ the\r\n\ <tt>PreferencesFactory</tt>\ interface.\ \ The\ class\ is\ loaded\ and\r\n\ instantiated;\ if\ this\ process\ fails\ then\ an\ unspecified\ error\ is\r\n\ thrown.</p></li>\r\n\r\n\ <li><p>\ If\ a\ <tt>PreferencesFactory</tt>\ implementation\ class\ file\r\n\ has\ been\ installed\ in\ a\ jar\ file\ that\ is\ visible\ to\ the\r\n\ {@link\ java.lang.ClassLoader\#getSystemClassLoader\ system\ class\ loader},\r\n\ and\ that\ jar\ file\ contains\ a\ provider-configuration\ file\ named\r\n\ <tt>java.util.prefs.PreferencesFactory</tt>\ in\ the\ resource\r\n\ directory\ <tt>META-INF/services</tt>,\ then\ the\ first\ class\ name\r\n\ specified\ in\ that\ file\ is\ taken.\ \ If\ more\ than\ one\ such\ jar\ file\ is\r\n\ provided,\ the\ first\ one\ found\ will\ be\ used.\ \ The\ class\ is\ loaded\r\n\ and\ instantiated;\ if\ this\ process\ fails\ then\ an\ unspecified\ error\r\n\ is\ thrown.\ \ </p></li>\r\n\r\n\ <li><p>Finally,\ if\ neither\ the\ above-mentioned\ system\ property\ nor\r\n\ an\ extension\ jar\ file\ is\ provided,\ then\ the\ system-wide\ default\r\n\ <tt>PreferencesFactory</tt>\ implementation\ for\ the\ underlying\r\n\ platform\ is\ loaded\ and\ instantiated.</p></li>\r\n\r\n\ </ol>\r\n\r\n\ @author\ \ Josh\ Bloch\r\n\ @since\ \ \ 1.4\r\n
comment1.params=
comment1.target=java.util.prefs.PreferencesFactory\ factory()
comment10.params=
comment10.target=Preferences()
comment10.text=\r\n\ Sole\ constructor.\ (For\ invocation\ by\ subclass\ constructors,\ typically\r\n\ implicit.)\r\n
comment11.params=key\ value
comment11.target=void\ put(java.lang.String,\ java.lang.String)
comment11.text=\r\n\ Associates\ the\ specified\ value\ with\ the\ specified\ key\ in\ this\r\n\ preference\ node.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ specified\ value\ is\ to\ be\ associated.\r\n\ @param\ value\ value\ to\ be\ associated\ with\ the\ specified\ key.\r\n\ @throws\ NullPointerException\ if\ key\ or\ value\ is\ <tt>null</tt>.\r\n\ @throws\ IllegalArgumentException\ if\ <tt>key.length()</tt>\ exceeds\r\n\ \ \ \ \ \ \ <tt>MAX_KEY_LENGTH</tt>\ or\ if\ <tt>value.length</tt>\ exceeds\r\n\ \ \ \ \ \ \ <tt>MAX_VALUE_LENGTH</tt>.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n
comment12.params=key\ def
comment12.target=java.lang.String\ get(java.lang.String,\ java.lang.String)
comment12.text=\r\n\ Returns\ the\ value\ associated\ with\ the\ specified\ key\ in\ this\ preference\r\n\ node.\ \ Returns\ the\ specified\ default\ if\ there\ is\ no\ value\ associated\r\n\ with\ the\ key,\ or\ the\ backing\ store\ is\ inaccessible.\r\n\r\n\ <p>Some\ implementations\ may\ store\ default\ values\ in\ their\ backing\r\n\ stores.\ \ If\ there\ is\ no\ value\ associated\ with\ the\ specified\ key\r\n\ but\ there\ is\ such\ a\ <i>stored\ default</i>,\ it\ is\ returned\ in\r\n\ preference\ to\ the\ specified\ default.\r\n\r\n\ @param\ key\ key\ whose\ associated\ value\ is\ to\ be\ returned.\r\n\ @param\ def\ the\ value\ to\ be\ returned\ in\ the\ event\ that\ this\r\n\ \ \ \ \ \ \ \ preference\ node\ has\ no\ value\ associated\ with\ <tt>key</tt>.\r\n\ @return\ the\ value\ associated\ with\ <tt>key</tt>,\ or\ <tt>def</tt>\r\n\ \ \ \ \ \ \ \ \ if\ no\ value\ is\ associated\ with\ <tt>key</tt>,\ or\ the\ backing\r\n\ \ \ \ \ \ \ \ \ store\ is\ inaccessible.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\ \ (A\r\n\ \ \ \ \ \ \ \ \ <tt>null</tt>\ value\ for\ <tt>def</tt>\ <i>is</i>\ permitted.)\r\n
comment13.params=key
comment13.target=void\ remove(java.lang.String)
comment13.text=\r\n\ Removes\ the\ value\ associated\ with\ the\ specified\ key\ in\ this\ preference\r\n\ node,\ if\ any.\r\n\r\n\ <p>If\ this\ implementation\ supports\ <i>stored\ defaults</i>,\ and\ there\ is\r\n\ such\ a\ default\ for\ the\ specified\ preference,\ the\ stored\ default\ will\ be\r\n\ "exposed"\ by\ this\ call,\ in\ the\ sense\ that\ it\ will\ be\ returned\r\n\ by\ a\ succeeding\ call\ to\ <tt>get</tt>.\r\n\r\n\ @param\ key\ key\ whose\ mapping\ is\ to\ be\ removed\ from\ the\ preference\ node.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n
comment14.params=
comment14.target=void\ clear()
comment14.text=\r\n\ Removes\ all\ of\ the\ preferences\ (key-value\ associations)\ in\ this\r\n\ preference\ node.\ \ This\ call\ has\ no\ effect\ on\ any\ descendants\r\n\ of\ this\ node.\r\n\r\n\ <p>If\ this\ implementation\ supports\ <i>stored\ defaults</i>,\ and\ this\r\n\ node\ in\ the\ preferences\ hierarchy\ contains\ any\ such\ defaults,\r\n\ the\ stored\ defaults\ will\ be\ "exposed"\ by\ this\ call,\ in\ the\ sense\ that\r\n\ they\ will\ be\ returned\ by\ succeeding\ calls\ to\ <tt>get</tt>.\r\n\r\n\ @throws\ BackingStoreException\ if\ this\ operation\ cannot\ be\ completed\r\n\ \ \ \ \ \ \ \ \ due\ to\ a\ failure\ in\ the\ backing\ store,\ or\ inability\ to\r\n\ \ \ \ \ \ \ \ \ communicate\ with\ it.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#removeNode()\r\n
comment15.params=key\ value
comment15.target=void\ putInt(java.lang.String,\ int)
comment15.text=\r\n\ Associates\ a\ string\ representing\ the\ specified\ int\ value\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ The\ associated\ string\ is\ the\r\n\ one\ that\ would\ be\ returned\ if\ the\ int\ value\ were\ passed\ to\r\n\ {@link\ Integer\#toString(int)}.\ \ This\ method\ is\ intended\ for\ use\ in\r\n\ conjunction\ with\ {@link\ \#getInt}.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ string\ form\ of\ value\ is\ to\ be\ associated.\r\n\ @param\ value\ value\ whose\ string\ form\ is\ to\ be\ associated\ with\ key.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @throws\ IllegalArgumentException\ if\ <tt>key.length()</tt>\ exceeds\r\n\ \ \ \ \ \ \ \ \ <tt>MAX_KEY_LENGTH</tt>.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#getInt(String,int)\r\n
comment16.params=key\ def
comment16.target=int\ getInt(java.lang.String,\ int)
comment16.text=\r\n\ Returns\ the\ int\ value\ represented\ by\ the\ string\ associated\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ The\ string\ is\ converted\ to\r\n\ an\ integer\ as\ by\ {@link\ Integer\#parseInt(String)}.\ \ Returns\ the\r\n\ specified\ default\ if\ there\ is\ no\ value\ associated\ with\ the\ key,\r\n\ the\ backing\ store\ is\ inaccessible,\ or\ if\r\n\ <tt>Integer.parseInt(String)</tt>\ would\ throw\ a\ {@link\r\n\ NumberFormatException}\ if\ the\ associated\ value\ were\ passed.\ \ This\r\n\ method\ is\ intended\ for\ use\ in\ conjunction\ with\ {@link\ \#putInt}.\r\n\r\n\ <p>If\ the\ implementation\ supports\ <i>stored\ defaults</i>\ and\ such\ a\r\n\ default\ exists,\ is\ accessible,\ and\ could\ be\ converted\ to\ an\ int\r\n\ with\ <tt>Integer.parseInt</tt>,\ this\ int\ is\ returned\ in\ preference\ to\r\n\ the\ specified\ default.\r\n\r\n\ @param\ key\ key\ whose\ associated\ value\ is\ to\ be\ returned\ as\ an\ int.\r\n\ @param\ def\ the\ value\ to\ be\ returned\ in\ the\ event\ that\ this\r\n\ \ \ \ \ \ \ \ preference\ node\ has\ no\ value\ associated\ with\ <tt>key</tt>\r\n\ \ \ \ \ \ \ \ or\ the\ associated\ value\ cannot\ be\ interpreted\ as\ an\ int,\r\n\ \ \ \ \ \ \ \ or\ the\ backing\ store\ is\ inaccessible.\r\n\ @return\ the\ int\ value\ represented\ by\ the\ string\ associated\ with\r\n\ \ \ \ \ \ \ \ \ <tt>key</tt>\ in\ this\ preference\ node,\ or\ <tt>def</tt>\ if\ the\r\n\ \ \ \ \ \ \ \ \ associated\ value\ does\ not\ exist\ or\ cannot\ be\ interpreted\ as\r\n\ \ \ \ \ \ \ \ \ an\ int.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @see\ \#putInt(String,int)\r\n\ @see\ \#get(String,String)\r\n
comment17.params=key\ value
comment17.target=void\ putLong(java.lang.String,\ long)
comment17.text=\r\n\ Associates\ a\ string\ representing\ the\ specified\ long\ value\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ The\ associated\ string\ is\ the\r\n\ one\ that\ would\ be\ returned\ if\ the\ long\ value\ were\ passed\ to\r\n\ {@link\ Long\#toString(long)}.\ \ This\ method\ is\ intended\ for\ use\ in\r\n\ conjunction\ with\ {@link\ \#getLong}.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ string\ form\ of\ value\ is\ to\ be\ associated.\r\n\ @param\ value\ value\ whose\ string\ form\ is\ to\ be\ associated\ with\ key.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @throws\ IllegalArgumentException\ if\ <tt>key.length()</tt>\ exceeds\r\n\ \ \ \ \ \ \ \ \ <tt>MAX_KEY_LENGTH</tt>.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#getLong(String,long)\r\n
comment18.params=key\ def
comment18.target=long\ getLong(java.lang.String,\ long)
comment18.text=\r\n\ Returns\ the\ long\ value\ represented\ by\ the\ string\ associated\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ The\ string\ is\ converted\ to\r\n\ a\ long\ as\ by\ {@link\ Long\#parseLong(String)}.\ \ Returns\ the\r\n\ specified\ default\ if\ there\ is\ no\ value\ associated\ with\ the\ key,\r\n\ the\ backing\ store\ is\ inaccessible,\ or\ if\r\n\ <tt>Long.parseLong(String)</tt>\ would\ throw\ a\ {@link\r\n\ NumberFormatException}\ if\ the\ associated\ value\ were\ passed.\ \ This\r\n\ method\ is\ intended\ for\ use\ in\ conjunction\ with\ {@link\ \#putLong}.\r\n\r\n\ <p>If\ the\ implementation\ supports\ <i>stored\ defaults</i>\ and\ such\ a\r\n\ default\ exists,\ is\ accessible,\ and\ could\ be\ converted\ to\ a\ long\r\n\ with\ <tt>Long.parseLong</tt>,\ this\ long\ is\ returned\ in\ preference\ to\r\n\ the\ specified\ default.\r\n\r\n\ @param\ key\ key\ whose\ associated\ value\ is\ to\ be\ returned\ as\ a\ long.\r\n\ @param\ def\ the\ value\ to\ be\ returned\ in\ the\ event\ that\ this\r\n\ \ \ \ \ \ \ \ preference\ node\ has\ no\ value\ associated\ with\ <tt>key</tt>\r\n\ \ \ \ \ \ \ \ or\ the\ associated\ value\ cannot\ be\ interpreted\ as\ a\ long,\r\n\ \ \ \ \ \ \ \ or\ the\ backing\ store\ is\ inaccessible.\r\n\ @return\ the\ long\ value\ represented\ by\ the\ string\ associated\ with\r\n\ \ \ \ \ \ \ \ \ <tt>key</tt>\ in\ this\ preference\ node,\ or\ <tt>def</tt>\ if\ the\r\n\ \ \ \ \ \ \ \ \ associated\ value\ does\ not\ exist\ or\ cannot\ be\ interpreted\ as\r\n\ \ \ \ \ \ \ \ \ a\ long.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @see\ \#putLong(String,long)\r\n\ @see\ \#get(String,String)\r\n
comment19.params=key\ value
comment19.target=void\ putBoolean(java.lang.String,\ boolean)
comment19.text=\r\n\ Associates\ a\ string\ representing\ the\ specified\ boolean\ value\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ The\ associated\ string\ is\r\n\ <tt>"true"</tt>\ if\ the\ value\ is\ true,\ and\ <tt>"false"</tt>\ if\ it\ is\r\n\ false.\ \ This\ method\ is\ intended\ for\ use\ in\ conjunction\ with\r\n\ {@link\ \#getBoolean}.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ string\ form\ of\ value\ is\ to\ be\ associated.\r\n\ @param\ value\ value\ whose\ string\ form\ is\ to\ be\ associated\ with\ key.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @throws\ IllegalArgumentException\ if\ <tt>key.length()</tt>\ exceeds\r\n\ \ \ \ \ \ \ \ \ <tt>MAX_KEY_LENGTH</tt>.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#getBoolean(String,boolean)\r\n\ @see\ \#get(String,String)\r\n
comment2.params=
comment2.target=java.lang.String\ run()
comment20.params=key\ def
comment20.target=boolean\ getBoolean(java.lang.String,\ boolean)
comment20.text=\r\n\ Returns\ the\ boolean\ value\ represented\ by\ the\ string\ associated\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ Valid\ strings\r\n\ are\ <tt>"true"</tt>,\ which\ represents\ true,\ and\ <tt>"false"</tt>,\ which\r\n\ represents\ false.\ \ Case\ is\ ignored,\ so,\ for\ example,\ <tt>"TRUE"</tt>\r\n\ and\ <tt>"False"</tt>\ are\ also\ valid.\ \ This\ method\ is\ intended\ for\ use\ in\r\n\ conjunction\ with\ {@link\ \#putBoolean}.\r\n\r\n\ <p>Returns\ the\ specified\ default\ if\ there\ is\ no\ value\r\n\ associated\ with\ the\ key,\ the\ backing\ store\ is\ inaccessible,\ or\ if\ the\r\n\ associated\ value\ is\ something\ other\ than\ <tt>"true"</tt>\ or\r\n\ <tt>"false"</tt>,\ ignoring\ case.\r\n\r\n\ <p>If\ the\ implementation\ supports\ <i>stored\ defaults</i>\ and\ such\ a\r\n\ default\ exists\ and\ is\ accessible,\ it\ is\ used\ in\ preference\ to\ the\r\n\ specified\ default,\ unless\ the\ stored\ default\ is\ something\ other\ than\r\n\ <tt>"true"</tt>\ or\ <tt>"false"</tt>,\ ignoring\ case,\ in\ which\ case\ the\r\n\ specified\ default\ is\ used.\r\n\r\n\ @param\ key\ key\ whose\ associated\ value\ is\ to\ be\ returned\ as\ a\ boolean.\r\n\ @param\ def\ the\ value\ to\ be\ returned\ in\ the\ event\ that\ this\r\n\ \ \ \ \ \ \ \ preference\ node\ has\ no\ value\ associated\ with\ <tt>key</tt>\r\n\ \ \ \ \ \ \ \ or\ the\ associated\ value\ cannot\ be\ interpreted\ as\ a\ boolean,\r\n\ \ \ \ \ \ \ \ or\ the\ backing\ store\ is\ inaccessible.\r\n\ @return\ the\ boolean\ value\ represented\ by\ the\ string\ associated\ with\r\n\ \ \ \ \ \ \ \ \ <tt>key</tt>\ in\ this\ preference\ node,\ or\ <tt>def</tt>\ if\ the\r\n\ \ \ \ \ \ \ \ \ associated\ value\ does\ not\ exist\ or\ cannot\ be\ interpreted\ as\r\n\ \ \ \ \ \ \ \ \ a\ boolean.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @see\ \#get(String,String)\r\n\ @see\ \#putBoolean(String,boolean)\r\n
comment21.params=key\ value
comment21.target=void\ putFloat(java.lang.String,\ float)
comment21.text=\r\n\ Associates\ a\ string\ representing\ the\ specified\ float\ value\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ The\ associated\ string\ is\ the\r\n\ one\ that\ would\ be\ returned\ if\ the\ float\ value\ were\ passed\ to\r\n\ {@link\ Float\#toString(float)}.\ \ This\ method\ is\ intended\ for\ use\ in\r\n\ conjunction\ with\ {@link\ \#getFloat}.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ string\ form\ of\ value\ is\ to\ be\ associated.\r\n\ @param\ value\ value\ whose\ string\ form\ is\ to\ be\ associated\ with\ key.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @throws\ IllegalArgumentException\ if\ <tt>key.length()</tt>\ exceeds\r\n\ \ \ \ \ \ \ \ \ <tt>MAX_KEY_LENGTH</tt>.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#getFloat(String,float)\r\n
comment22.params=key\ def
comment22.target=float\ getFloat(java.lang.String,\ float)
comment22.text=\r\n\ Returns\ the\ float\ value\ represented\ by\ the\ string\ associated\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ The\ string\ is\ converted\ to\ an\r\n\ integer\ as\ by\ {@link\ Float\#parseFloat(String)}.\ \ Returns\ the\ specified\r\n\ default\ if\ there\ is\ no\ value\ associated\ with\ the\ key,\ the\ backing\ store\r\n\ is\ inaccessible,\ or\ if\ <tt>Float.parseFloat(String)</tt>\ would\ throw\ a\r\n\ {@link\ NumberFormatException}\ if\ the\ associated\ value\ were\ passed.\r\n\ This\ method\ is\ intended\ for\ use\ in\ conjunction\ with\ {@link\ \#putFloat}.\r\n\r\n\ <p>If\ the\ implementation\ supports\ <i>stored\ defaults</i>\ and\ such\ a\r\n\ default\ exists,\ is\ accessible,\ and\ could\ be\ converted\ to\ a\ float\r\n\ with\ <tt>Float.parseFloat</tt>,\ this\ float\ is\ returned\ in\ preference\ to\r\n\ the\ specified\ default.\r\n\r\n\ @param\ key\ key\ whose\ associated\ value\ is\ to\ be\ returned\ as\ a\ float.\r\n\ @param\ def\ the\ value\ to\ be\ returned\ in\ the\ event\ that\ this\r\n\ \ \ \ \ \ \ \ preference\ node\ has\ no\ value\ associated\ with\ <tt>key</tt>\r\n\ \ \ \ \ \ \ \ or\ the\ associated\ value\ cannot\ be\ interpreted\ as\ a\ float,\r\n\ \ \ \ \ \ \ \ or\ the\ backing\ store\ is\ inaccessible.\r\n\ @return\ the\ float\ value\ represented\ by\ the\ string\ associated\ with\r\n\ \ \ \ \ \ \ \ \ <tt>key</tt>\ in\ this\ preference\ node,\ or\ <tt>def</tt>\ if\ the\r\n\ \ \ \ \ \ \ \ \ associated\ value\ does\ not\ exist\ or\ cannot\ be\ interpreted\ as\r\n\ \ \ \ \ \ \ \ \ a\ float.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @see\ \#putFloat(String,float)\r\n\ @see\ \#get(String,String)\r\n
comment23.params=key\ value
comment23.target=void\ putDouble(java.lang.String,\ double)
comment23.text=\r\n\ Associates\ a\ string\ representing\ the\ specified\ double\ value\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ The\ associated\ string\ is\ the\r\n\ one\ that\ would\ be\ returned\ if\ the\ double\ value\ were\ passed\ to\r\n\ {@link\ Double\#toString(double)}.\ \ This\ method\ is\ intended\ for\ use\ in\r\n\ conjunction\ with\ {@link\ \#getDouble}.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ string\ form\ of\ value\ is\ to\ be\ associated.\r\n\ @param\ value\ value\ whose\ string\ form\ is\ to\ be\ associated\ with\ key.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @throws\ IllegalArgumentException\ if\ <tt>key.length()</tt>\ exceeds\r\n\ \ \ \ \ \ \ \ \ <tt>MAX_KEY_LENGTH</tt>.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#getDouble(String,double)\r\n
comment24.params=key\ def
comment24.target=double\ getDouble(java.lang.String,\ double)
comment24.text=\r\n\ Returns\ the\ double\ value\ represented\ by\ the\ string\ associated\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ The\ string\ is\ converted\ to\ an\r\n\ integer\ as\ by\ {@link\ Double\#parseDouble(String)}.\ \ Returns\ the\ specified\r\n\ default\ if\ there\ is\ no\ value\ associated\ with\ the\ key,\ the\ backing\ store\r\n\ is\ inaccessible,\ or\ if\ <tt>Double.parseDouble(String)</tt>\ would\ throw\ a\r\n\ {@link\ NumberFormatException}\ if\ the\ associated\ value\ were\ passed.\r\n\ This\ method\ is\ intended\ for\ use\ in\ conjunction\ with\ {@link\ \#putDouble}.\r\n\r\n\ <p>If\ the\ implementation\ supports\ <i>stored\ defaults</i>\ and\ such\ a\r\n\ default\ exists,\ is\ accessible,\ and\ could\ be\ converted\ to\ a\ double\r\n\ with\ <tt>Double.parseDouble</tt>,\ this\ double\ is\ returned\ in\ preference\r\n\ to\ the\ specified\ default.\r\n\r\n\ @param\ key\ key\ whose\ associated\ value\ is\ to\ be\ returned\ as\ a\ double.\r\n\ @param\ def\ the\ value\ to\ be\ returned\ in\ the\ event\ that\ this\r\n\ \ \ \ \ \ \ \ preference\ node\ has\ no\ value\ associated\ with\ <tt>key</tt>\r\n\ \ \ \ \ \ \ \ or\ the\ associated\ value\ cannot\ be\ interpreted\ as\ a\ double,\r\n\ \ \ \ \ \ \ \ or\ the\ backing\ store\ is\ inaccessible.\r\n\ @return\ the\ double\ value\ represented\ by\ the\ string\ associated\ with\r\n\ \ \ \ \ \ \ \ \ <tt>key</tt>\ in\ this\ preference\ node,\ or\ <tt>def</tt>\ if\ the\r\n\ \ \ \ \ \ \ \ \ associated\ value\ does\ not\ exist\ or\ cannot\ be\ interpreted\ as\r\n\ \ \ \ \ \ \ \ \ a\ double.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\r\n\ @see\ \#putDouble(String,double)\r\n\ @see\ \#get(String,String)\r\n
comment25.params=key\ value
comment25.target=void\ putByteArray(java.lang.String,\ byte[])
comment25.text=\r\n\ Associates\ a\ string\ representing\ the\ specified\ byte\ array\ with\ the\r\n\ specified\ key\ in\ this\ preference\ node.\ \ The\ associated\ string\ is\r\n\ the\ <i>Base64</i>\ encoding\ of\ the\ byte\ array,\ as\ defined\ in\ <a\r\n\ href\=http\://www.ietf.org/rfc/rfc2045.txt>RFC\ 2045</a>,\ Section\ 6.8,\r\n\ with\ one\ minor\ change\:\ the\ string\ will\ consist\ solely\ of\ characters\r\n\ from\ the\ <i>Base64\ Alphabet</i>;\ it\ will\ not\ contain\ any\ newline\r\n\ characters.\ \ Note\ that\ the\ maximum\ length\ of\ the\ byte\ array\ is\ limited\r\n\ to\ three\ quarters\ of\ <tt>MAX_VALUE_LENGTH</tt>\ so\ that\ the\ length\r\n\ of\ the\ Base64\ encoded\ String\ does\ not\ exceed\ <tt>MAX_VALUE_LENGTH</tt>.\r\n\ This\ method\ is\ intended\ for\ use\ in\ conjunction\ with\r\n\ {@link\ \#getByteArray}.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ string\ form\ of\ value\ is\ to\ be\ associated.\r\n\ @param\ value\ value\ whose\ string\ form\ is\ to\ be\ associated\ with\ key.\r\n\ @throws\ NullPointerException\ if\ key\ or\ value\ is\ <tt>null</tt>.\r\n\ @throws\ IllegalArgumentException\ if\ key.length()\ exceeds\ MAX_KEY_LENGTH\r\n\ \ \ \ \ \ \ \ \ or\ if\ value.length\ exceeds\ MAX_VALUE_LENGTH*3/4.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#getByteArray(String,byte[])\r\n\ @see\ \#get(String,String)\r\n
comment26.params=key\ def
comment26.target=byte[]\ getByteArray(java.lang.String,\ byte[])
comment26.text=\r\n\ Returns\ the\ byte\ array\ value\ represented\ by\ the\ string\ associated\ with\r\n\ the\ specified\ key\ in\ this\ preference\ node.\ \ Valid\ strings\ are\r\n\ <i>Base64</i>\ encoded\ binary\ data,\ as\ defined\ in\ <a\r\n\ href\=http\://www.ietf.org/rfc/rfc2045.txt>RFC\ 2045</a>,\ Section\ 6.8,\r\n\ with\ one\ minor\ change\:\ the\ string\ must\ consist\ solely\ of\ characters\r\n\ from\ the\ <i>Base64\ Alphabet</i>;\ no\ newline\ characters\ or\r\n\ extraneous\ characters\ are\ permitted.\ \ This\ method\ is\ intended\ for\ use\r\n\ in\ conjunction\ with\ {@link\ \#putByteArray}.\r\n\r\n\ <p>Returns\ the\ specified\ default\ if\ there\ is\ no\ value\r\n\ associated\ with\ the\ key,\ the\ backing\ store\ is\ inaccessible,\ or\ if\ the\r\n\ associated\ value\ is\ not\ a\ valid\ Base64\ encoded\ byte\ array\r\n\ (as\ defined\ above).\r\n\r\n\ <p>If\ the\ implementation\ supports\ <i>stored\ defaults</i>\ and\ such\ a\r\n\ default\ exists\ and\ is\ accessible,\ it\ is\ used\ in\ preference\ to\ the\r\n\ specified\ default,\ unless\ the\ stored\ default\ is\ not\ a\ valid\ Base64\r\n\ encoded\ byte\ array\ (as\ defined\ above),\ in\ which\ case\ the\r\n\ specified\ default\ is\ used.\r\n\r\n\ @param\ key\ key\ whose\ associated\ value\ is\ to\ be\ returned\ as\ a\ byte\ array.\r\n\ @param\ def\ the\ value\ to\ be\ returned\ in\ the\ event\ that\ this\r\n\ \ \ \ \ \ \ \ preference\ node\ has\ no\ value\ associated\ with\ <tt>key</tt>\r\n\ \ \ \ \ \ \ \ or\ the\ associated\ value\ cannot\ be\ interpreted\ as\ a\ byte\ array,\r\n\ \ \ \ \ \ \ \ or\ the\ backing\ store\ is\ inaccessible.\r\n\ @return\ the\ byte\ array\ value\ represented\ by\ the\ string\ associated\ with\r\n\ \ \ \ \ \ \ \ \ <tt>key</tt>\ in\ this\ preference\ node,\ or\ <tt>def</tt>\ if\ the\r\n\ \ \ \ \ \ \ \ \ associated\ value\ does\ not\ exist\ or\ cannot\ be\ interpreted\ as\r\n\ \ \ \ \ \ \ \ \ a\ byte\ array.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @throws\ NullPointerException\ if\ <tt>key</tt>\ is\ <tt>null</tt>.\ \ (A\r\n\ \ \ \ \ \ \ \ \ <tt>null</tt>\ value\ for\ <tt>def</tt>\ <i>is</i>\ permitted.)\r\n\ @see\ \#get(String,String)\r\n\ @see\ \#putByteArray(String,byte[])\r\n
comment27.params=
comment27.target=java.lang.String[]\ keys()
comment27.text=\r\n\ Returns\ all\ of\ the\ keys\ that\ have\ an\ associated\ value\ in\ this\r\n\ preference\ node.\ \ (The\ returned\ array\ will\ be\ of\ size\ zero\ if\r\n\ this\ node\ has\ no\ preferences.)\r\n\r\n\ <p>If\ the\ implementation\ supports\ <i>stored\ defaults</i>\ and\ there\r\n\ are\ any\ such\ defaults\ at\ this\ node\ that\ have\ not\ been\ overridden,\r\n\ by\ explicit\ preferences,\ the\ defaults\ are\ returned\ in\ the\ array\ in\r\n\ addition\ to\ any\ explicit\ preferences.\r\n\r\n\ @return\ an\ array\ of\ the\ keys\ that\ have\ an\ associated\ value\ in\ this\r\n\ \ \ \ \ \ \ \ \ preference\ node.\r\n\ @throws\ BackingStoreException\ if\ this\ operation\ cannot\ be\ completed\r\n\ \ \ \ \ \ \ \ \ due\ to\ a\ failure\ in\ the\ backing\ store,\ or\ inability\ to\r\n\ \ \ \ \ \ \ \ \ communicate\ with\ it.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n
comment28.params=
comment28.target=java.lang.String[]\ childrenNames()
comment28.text=\r\n\ Returns\ the\ names\ of\ the\ children\ of\ this\ preference\ node,\ relative\ to\r\n\ this\ node.\ \ (The\ returned\ array\ will\ be\ of\ size\ zero\ if\ this\ node\ has\r\n\ no\ children.)\r\n\r\n\ @return\ the\ names\ of\ the\ children\ of\ this\ preference\ node.\r\n\ @throws\ BackingStoreException\ if\ this\ operation\ cannot\ be\ completed\r\n\ \ \ \ \ \ \ \ \ due\ to\ a\ failure\ in\ the\ backing\ store,\ or\ inability\ to\r\n\ \ \ \ \ \ \ \ \ communicate\ with\ it.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n
comment29.params=
comment29.target=java.util.prefs.Preferences\ parent()
comment29.text=\r\n\ Returns\ the\ parent\ of\ this\ preference\ node,\ or\ <tt>null</tt>\ if\ this\ is\r\n\ the\ root.\r\n\r\n\ @return\ the\ parent\ of\ this\ preference\ node.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n
comment3.params=
comment3.target=PreferencesFactory\ run()
comment30.params=pathName
comment30.target=java.util.prefs.Preferences\ node(java.lang.String)
comment30.text=\r\n\ Returns\ the\ named\ preference\ node\ in\ the\ same\ tree\ as\ this\ node,\r\n\ creating\ it\ and\ any\ of\ its\ ancestors\ if\ they\ do\ not\ already\ exist.\r\n\ Accepts\ a\ relative\ or\ absolute\ path\ name.\ \ Relative\ path\ names\r\n\ (which\ do\ not\ begin\ with\ the\ slash\ character\ <tt>('/')</tt>)\ are\r\n\ interpreted\ relative\ to\ this\ preference\ node.\r\n\r\n\ <p>If\ the\ returned\ node\ did\ not\ exist\ prior\ to\ this\ call,\ this\ node\ and\r\n\ any\ ancestors\ that\ were\ created\ by\ this\ call\ are\ not\ guaranteed\r\n\ to\ become\ permanent\ until\ the\ <tt>flush</tt>\ method\ is\ called\ on\r\n\ the\ returned\ node\ (or\ one\ of\ its\ ancestors\ or\ descendants).\r\n\r\n\ @param\ pathName\ the\ path\ name\ of\ the\ preference\ node\ to\ return.\r\n\ @return\ the\ specified\ preference\ node.\r\n\ @throws\ IllegalArgumentException\ if\ the\ path\ name\ is\ invalid\ (i.e.,\r\n\ \ \ \ \ \ \ \ \ it\ contains\ multiple\ consecutive\ slash\ characters,\ or\ ends\r\n\ \ \ \ \ \ \ \ \ with\ a\ slash\ character\ and\ is\ more\ than\ one\ character\ long).\r\n\ @throws\ NullPointerException\ if\ path\ name\ is\ <tt>null</tt>.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#flush()\r\n
comment31.params=pathName
comment31.target=boolean\ nodeExists(java.lang.String)
comment31.text=\r\n\ Returns\ true\ if\ the\ named\ preference\ node\ exists\ in\ the\ same\ tree\r\n\ as\ this\ node.\ \ Relative\ path\ names\ (which\ do\ not\ begin\ with\ the\ slash\r\n\ character\ <tt>('/')</tt>)\ are\ interpreted\ relative\ to\ this\ preference\r\n\ node.\r\n\r\n\ <p>If\ this\ node\ (or\ an\ ancestor)\ has\ already\ been\ removed\ with\ the\r\n\ {@link\ \#removeNode()}\ method,\ it\ <i>is</i>\ legal\ to\ invoke\ this\ method,\r\n\ but\ only\ with\ the\ path\ name\ <tt>""</tt>;\ the\ invocation\ will\ return\r\n\ <tt>false</tt>.\ \ Thus,\ the\ idiom\ <tt>p.nodeExists("")</tt>\ may\ be\r\n\ used\ to\ test\ whether\ <tt>p</tt>\ has\ been\ removed.\r\n\r\n\ @param\ pathName\ the\ path\ name\ of\ the\ node\ whose\ existence\r\n\ \ \ \ \ \ \ \ is\ to\ be\ checked.\r\n\ @return\ true\ if\ the\ specified\ node\ exists.\r\n\ @throws\ BackingStoreException\ if\ this\ operation\ cannot\ be\ completed\r\n\ \ \ \ \ \ \ \ \ due\ to\ a\ failure\ in\ the\ backing\ store,\ or\ inability\ to\r\n\ \ \ \ \ \ \ \ \ communicate\ with\ it.\r\n\ @throws\ IllegalArgumentException\ if\ the\ path\ name\ is\ invalid\ (i.e.,\r\n\ \ \ \ \ \ \ \ \ it\ contains\ multiple\ consecutive\ slash\ characters,\ or\ ends\r\n\ \ \ \ \ \ \ \ \ with\ a\ slash\ character\ and\ is\ more\ than\ one\ character\ long).\r\n\ @throws\ NullPointerException\ if\ path\ name\ is\ <tt>null</tt>.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method\ and\r\n\ \ \ \ \ \ \ \ \ <tt>pathName</tt>\ is\ not\ the\ empty\ string\ (<tt>""</tt>).\r\n
comment32.params=
comment32.target=void\ removeNode()
comment32.text=\r\n\ Removes\ this\ preference\ node\ and\ all\ of\ its\ descendants,\ invalidating\r\n\ any\ preferences\ contained\ in\ the\ removed\ nodes.\ \ Once\ a\ node\ has\ been\r\n\ removed,\ attempting\ any\ method\ other\ than\ {@link\ \#name()},\r\n\ {@link\ \#absolutePath()},\ {@link\ \#isUserNode()},\ {@link\ \#flush()}\ or\r\n\ {@link\ \#node(String)\ nodeExists("")}\ on\ the\ corresponding\r\n\ <tt>Preferences</tt>\ instance\ will\ fail\ with\ an\r\n\ <tt>IllegalStateException</tt>.\ \ (The\ methods\ defined\ on\ {@link\ Object}\r\n\ can\ still\ be\ invoked\ on\ a\ node\ after\ it\ has\ been\ removed;\ they\ will\ not\r\n\ throw\ <tt>IllegalStateException</tt>.)\r\n\r\n\ <p>The\ removal\ is\ not\ guaranteed\ to\ be\ persistent\ until\ the\r\n\ <tt>flush</tt>\ method\ is\ called\ on\ this\ node\ (or\ an\ ancestor).\r\n\r\n\ <p>If\ this\ implementation\ supports\ <i>stored\ defaults</i>,\ removing\ a\r\n\ node\ exposes\ any\ stored\ defaults\ at\ or\ below\ this\ node.\ \ Thus,\ a\r\n\ subsequent\ call\ to\ <tt>nodeExists</tt>\ on\ this\ node's\ path\ name\ may\r\n\ return\ <tt>true</tt>,\ and\ a\ subsequent\ call\ to\ <tt>node</tt>\ on\ this\r\n\ path\ name\ may\ return\ a\ (different)\ <tt>Preferences</tt>\ instance\r\n\ representing\ a\ non-empty\ collection\ of\ preferences\ and/or\ children.\r\n\r\n\ @throws\ BackingStoreException\ if\ this\ operation\ cannot\ be\ completed\r\n\ \ \ \ \ \ \ \ \ due\ to\ a\ failure\ in\ the\ backing\ store,\ or\ inability\ to\r\n\ \ \ \ \ \ \ \ \ communicate\ with\ it.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ already\r\n\ \ \ \ \ \ \ \ \ been\ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @throws\ UnsupportedOperationException\ if\ this\ method\ is\ invoked\ on\r\n\ \ \ \ \ \ \ \ \ the\ root\ node.\r\n\ @see\ \#flush()\r\n
comment33.params=
comment33.target=java.lang.String\ name()
comment33.text=\r\n\ Returns\ this\ preference\ node's\ name,\ relative\ to\ its\ parent.\r\n\r\n\ @return\ this\ preference\ node's\ name,\ relative\ to\ its\ parent.\r\n
comment34.params=
comment34.target=java.lang.String\ absolutePath()
comment34.text=\r\n\ Returns\ this\ preference\ node's\ absolute\ path\ name.\r\n\r\n\ @return\ this\ preference\ node's\ absolute\ path\ name.\r\n
comment35.params=
comment35.target=boolean\ isUserNode()
comment35.text=\r\n\ Returns\ <tt>true</tt>\ if\ this\ preference\ node\ is\ in\ the\ user\r\n\ preference\ tree,\ <tt>false</tt>\ if\ it's\ in\ the\ system\ preference\ tree.\r\n\r\n\ @return\ <tt>true</tt>\ if\ this\ preference\ node\ is\ in\ the\ user\r\n\ \ \ \ \ \ \ \ \ preference\ tree,\ <tt>false</tt>\ if\ it's\ in\ the\ system\r\n\ \ \ \ \ \ \ \ \ preference\ tree.\r\n
comment36.params=
comment36.target=java.lang.String\ toString()
comment36.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ preferences\ node,\r\n\ as\ if\ computed\ by\ the\ expression\:<tt>(this.isUserNode()\ ?\ "User"\ \:\r\n\ "System")\ +\ "\ Preference\ Node\:\ "\ +\ this.absolutePath()</tt>.\r\n
comment37.params=
comment37.target=void\ flush()
comment37.text=\r\n\ Forces\ any\ changes\ in\ the\ contents\ of\ this\ preference\ node\ and\ its\r\n\ descendants\ to\ the\ persistent\ store.\ \ Once\ this\ method\ returns\r\n\ successfully,\ it\ is\ safe\ to\ assume\ that\ all\ changes\ made\ in\ the\r\n\ subtree\ rooted\ at\ this\ node\ prior\ to\ the\ method\ invocation\ have\ become\r\n\ permanent.\r\n\r\n\ <p>Implementations\ are\ free\ to\ flush\ changes\ into\ the\ persistent\ store\r\n\ at\ any\ time.\ \ They\ do\ not\ need\ to\ wait\ for\ this\ method\ to\ be\ called.\r\n\r\n\ <p>When\ a\ flush\ occurs\ on\ a\ newly\ created\ node,\ it\ is\ made\ persistent,\r\n\ as\ are\ any\ ancestors\ (and\ descendants)\ that\ have\ yet\ to\ be\ made\r\n\ persistent.\ \ Note\ however\ that\ any\ preference\ value\ changes\ in\r\n\ ancestors\ are\ <i>not</i>\ guaranteed\ to\ be\ made\ persistent.\r\n\r\n\ <p>\ If\ this\ method\ is\ invoked\ on\ a\ node\ that\ has\ been\ removed\ with\r\n\ the\ {@link\ \#removeNode()}\ method,\ flushSpi()\ is\ invoked\ on\ this\ node,\r\n\ but\ not\ on\ others.\r\n\r\n\ @throws\ BackingStoreException\ if\ this\ operation\ cannot\ be\ completed\r\n\ \ \ \ \ \ \ \ \ due\ to\ a\ failure\ in\ the\ backing\ store,\ or\ inability\ to\r\n\ \ \ \ \ \ \ \ \ communicate\ with\ it.\r\n\ @see\ \ \ \ \#sync()\r\n
comment38.params=
comment38.target=void\ sync()
comment38.text=\r\n\ Ensures\ that\ future\ reads\ from\ this\ preference\ node\ and\ its\r\n\ descendants\ reflect\ any\ changes\ that\ were\ committed\ to\ the\ persistent\r\n\ store\ (from\ any\ VM)\ prior\ to\ the\ <tt>sync</tt>\ invocation.\ \ As\ a\r\n\ side-effect,\ forces\ any\ changes\ in\ the\ contents\ of\ this\ preference\ node\r\n\ and\ its\ descendants\ to\ the\ persistent\ store,\ as\ if\ the\ <tt>flush</tt>\r\n\ method\ had\ been\ invoked\ on\ this\ node.\r\n\r\n\ @throws\ BackingStoreException\ if\ this\ operation\ cannot\ be\ completed\r\n\ \ \ \ \ \ \ \ \ due\ to\ a\ failure\ in\ the\ backing\ store,\ or\ inability\ to\r\n\ \ \ \ \ \ \ \ \ communicate\ with\ it.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \ \ \ \#flush()\r\n
comment39.params=pcl
comment39.target=void\ addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)
comment39.text=\r\n\ Registers\ the\ specified\ listener\ to\ receive\ <i>preference\ change\r\n\ events</i>\ for\ this\ preference\ node.\ \ A\ preference\ change\ event\ is\r\n\ generated\ when\ a\ preference\ is\ added\ to\ this\ node,\ removed\ from\ this\r\n\ node,\ or\ when\ the\ value\ associated\ with\ a\ preference\ is\ changed.\r\n\ (Preference\ change\ events\ are\ <i>not</i>\ generated\ by\ the\ {@link\r\n\ \#removeNode()}\ method,\ which\ generates\ a\ <i>node\ change\ event</i>.\r\n\ Preference\ change\ events\ <i>are</i>\ generated\ by\ the\ <tt>clear</tt>\r\n\ method.)\r\n\r\n\ <p>Events\ are\ only\ guaranteed\ for\ changes\ made\ within\ the\ same\ JVM\r\n\ as\ the\ registered\ listener,\ though\ some\ implementations\ may\ generate\r\n\ events\ for\ changes\ made\ outside\ this\ JVM.\ \ Events\ may\ be\ generated\r\n\ before\ the\ changes\ have\ been\ made\ persistent.\ \ Events\ are\ not\ generated\r\n\ when\ preferences\ are\ modified\ in\ descendants\ of\ this\ node;\ a\ caller\r\n\ desiring\ such\ events\ must\ register\ with\ each\ descendant.\r\n\r\n\ @param\ pcl\ The\ preference\ change\ listener\ to\ add.\r\n\ @throws\ NullPointerException\ if\ <tt>pcl</tt>\ is\ null.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#removePreferenceChangeListener(PreferenceChangeListener)\r\n\ @see\ \#addNodeChangeListener(NodeChangeListener)\r\n
comment4.params=
comment4.target=java.util.prefs.PreferencesFactory\ factory1()
comment40.params=pcl
comment40.target=void\ removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener)
comment40.text=\r\n\ Removes\ the\ specified\ preference\ change\ listener,\ so\ it\ no\ longer\r\n\ receives\ preference\ change\ events.\r\n\r\n\ @param\ pcl\ The\ preference\ change\ listener\ to\ remove.\r\n\ @throws\ IllegalArgumentException\ if\ <tt>pcl</tt>\ was\ not\ a\ registered\r\n\ \ \ \ \ \ \ \ \ preference\ change\ listener\ on\ this\ node.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#addPreferenceChangeListener(PreferenceChangeListener)\r\n
comment41.params=ncl
comment41.target=void\ addNodeChangeListener(java.util.prefs.NodeChangeListener)
comment41.text=\r\n\ Registers\ the\ specified\ listener\ to\ receive\ <i>node\ change\ events</i>\r\n\ for\ this\ node.\ \ A\ node\ change\ event\ is\ generated\ when\ a\ child\ node\ is\r\n\ added\ to\ or\ removed\ from\ this\ node.\ \ (A\ single\ {@link\ \#removeNode()}\r\n\ invocation\ results\ in\ multiple\ <i>node\ change\ events</i>,\ one\ for\ every\r\n\ node\ in\ the\ subtree\ rooted\ at\ the\ removed\ node.)\r\n\r\n\ <p>Events\ are\ only\ guaranteed\ for\ changes\ made\ within\ the\ same\ JVM\r\n\ as\ the\ registered\ listener,\ though\ some\ implementations\ may\ generate\r\n\ events\ for\ changes\ made\ outside\ this\ JVM.\ \ Events\ may\ be\ generated\r\n\ before\ the\ changes\ have\ become\ permanent.\ \ Events\ are\ not\ generated\r\n\ when\ indirect\ descendants\ of\ this\ node\ are\ added\ or\ removed;\ a\r\n\ caller\ desiring\ such\ events\ must\ register\ with\ each\ descendant.\r\n\r\n\ <p>Few\ guarantees\ can\ be\ made\ regarding\ node\ creation.\ \ Because\ nodes\r\n\ are\ created\ implicitly\ upon\ access,\ it\ may\ not\ be\ feasible\ for\ an\r\n\ implementation\ to\ determine\ whether\ a\ child\ node\ existed\ in\ the\ backing\r\n\ store\ prior\ to\ access\ (for\ example,\ because\ the\ backing\ store\ is\r\n\ unreachable\ or\ cached\ information\ is\ out\ of\ date).\ \ Under\ these\r\n\ circumstances,\ implementations\ are\ neither\ required\ to\ generate\ node\r\n\ change\ events\ nor\ prohibited\ from\ doing\ so.\r\n\r\n\ @param\ ncl\ The\ <tt>NodeChangeListener</tt>\ to\ add.\r\n\ @throws\ NullPointerException\ if\ <tt>ncl</tt>\ is\ null.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#removeNodeChangeListener(NodeChangeListener)\r\n\ @see\ \#addPreferenceChangeListener(PreferenceChangeListener)\r\n
comment42.params=ncl
comment42.target=void\ removeNodeChangeListener(java.util.prefs.NodeChangeListener)
comment42.text=\r\n\ Removes\ the\ specified\ <tt>NodeChangeListener</tt>,\ so\ it\ no\ longer\r\n\ receives\ change\ events.\r\n\r\n\ @param\ ncl\ The\ <tt>NodeChangeListener</tt>\ to\ remove.\r\n\ @throws\ IllegalArgumentException\ if\ <tt>ncl</tt>\ was\ not\ a\ registered\r\n\ \ \ \ \ \ \ \ \ <tt>NodeChangeListener</tt>\ on\ this\ node.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \#addNodeChangeListener(NodeChangeListener)\r\n
comment43.params=os
comment43.target=void\ exportNode(java.io.OutputStream)
comment43.text=\r\n\ Emits\ on\ the\ specified\ output\ stream\ an\ XML\ document\ representing\ all\r\n\ of\ the\ preferences\ contained\ in\ this\ node\ (but\ not\ its\ descendants).\r\n\ This\ XML\ document\ is,\ in\ effect,\ an\ offline\ backup\ of\ the\ node.\r\n\r\n\ <p>The\ XML\ document\ will\ have\ the\ following\ DOCTYPE\ declaration\:\r\n\ <pre>\r\n\ &lt;\!DOCTYPE\ preferences\ SYSTEM\ "http\://java.sun.com/dtd/preferences.dtd"&gt;\r\n\ </pre>\r\n\ The\ UTF-8\ character\ encoding\ will\ be\ used.\r\n\r\n\ <p>This\ method\ is\ an\ exception\ to\ the\ general\ rule\ that\ the\ results\ of\r\n\ concurrently\ executing\ multiple\ methods\ in\ this\ class\ yields\r\n\ results\ equivalent\ to\ some\ serial\ execution.\ \ If\ the\ preferences\r\n\ at\ this\ node\ are\ modified\ concurrently\ with\ an\ invocation\ of\ this\r\n\ method,\ the\ exported\ preferences\ comprise\ a\ "fuzzy\ snapshot"\ of\ the\r\n\ preferences\ contained\ in\ the\ node;\ some\ of\ the\ concurrent\ modifications\r\n\ may\ be\ reflected\ in\ the\ exported\ data\ while\ others\ may\ not.\r\n\r\n\ @param\ os\ the\ output\ stream\ on\ which\ to\ emit\ the\ XML\ document.\r\n\ @throws\ IOException\ if\ writing\ to\ the\ specified\ output\ stream\r\n\ \ \ \ \ \ \ \ \ results\ in\ an\ <tt>IOException</tt>.\r\n\ @throws\ BackingStoreException\ if\ preference\ data\ cannot\ be\ read\ from\r\n\ \ \ \ \ \ \ \ \ backing\ store.\r\n\ @see\ \ \ \ \#importPreferences(InputStream)\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n
comment44.params=os
comment44.target=void\ exportSubtree(java.io.OutputStream)
comment44.text=\r\n\ Emits\ an\ XML\ document\ representing\ all\ of\ the\ preferences\ contained\r\n\ in\ this\ node\ and\ all\ of\ its\ descendants.\ \ This\ XML\ document\ is,\ in\r\n\ effect,\ an\ offline\ backup\ of\ the\ subtree\ rooted\ at\ the\ node.\r\n\r\n\ <p>The\ XML\ document\ will\ have\ the\ following\ DOCTYPE\ declaration\:\r\n\ <pre>\r\n\ &lt;\!DOCTYPE\ preferences\ SYSTEM\ "http\://java.sun.com/dtd/preferences.dtd"&gt;\r\n\ </pre>\r\n\ The\ UTF-8\ character\ encoding\ will\ be\ used.\r\n\r\n\ <p>This\ method\ is\ an\ exception\ to\ the\ general\ rule\ that\ the\ results\ of\r\n\ concurrently\ executing\ multiple\ methods\ in\ this\ class\ yields\r\n\ results\ equivalent\ to\ some\ serial\ execution.\ \ If\ the\ preferences\r\n\ or\ nodes\ in\ the\ subtree\ rooted\ at\ this\ node\ are\ modified\ concurrently\r\n\ with\ an\ invocation\ of\ this\ method,\ the\ exported\ preferences\ comprise\ a\r\n\ "fuzzy\ snapshot"\ of\ the\ subtree;\ some\ of\ the\ concurrent\ modifications\r\n\ may\ be\ reflected\ in\ the\ exported\ data\ while\ others\ may\ not.\r\n\r\n\ @param\ os\ the\ output\ stream\ on\ which\ to\ emit\ the\ XML\ document.\r\n\ @throws\ IOException\ if\ writing\ to\ the\ specified\ output\ stream\r\n\ \ \ \ \ \ \ \ \ results\ in\ an\ <tt>IOException</tt>.\r\n\ @throws\ BackingStoreException\ if\ preference\ data\ cannot\ be\ read\ from\r\n\ \ \ \ \ \ \ \ \ backing\ store.\r\n\ @throws\ IllegalStateException\ if\ this\ node\ (or\ an\ ancestor)\ has\ been\r\n\ \ \ \ \ \ \ \ \ removed\ with\ the\ {@link\ \#removeNode()}\ method.\r\n\ @see\ \ \ \ \#importPreferences(InputStream)\r\n\ @see\ \ \ \ \#exportNode(OutputStream)\r\n
comment45.params=is
comment45.target=void\ importPreferences(java.io.InputStream)
comment45.text=\r\n\ Imports\ all\ of\ the\ preferences\ represented\ by\ the\ XML\ document\ on\ the\r\n\ specified\ input\ stream.\ \ The\ document\ may\ represent\ user\ preferences\ or\r\n\ system\ preferences.\ \ If\ it\ represents\ user\ preferences,\ the\ preferences\r\n\ will\ be\ imported\ into\ the\ calling\ user's\ preference\ tree\ (even\ if\ they\r\n\ originally\ came\ from\ a\ different\ user's\ preference\ tree).\ \ If\ any\ of\r\n\ the\ preferences\ described\ by\ the\ document\ inhabit\ preference\ nodes\ that\r\n\ do\ not\ exist,\ the\ nodes\ will\ be\ created.\r\n\r\n\ <p>The\ XML\ document\ must\ have\ the\ following\ DOCTYPE\ declaration\:\r\n\ <pre>\r\n\ &lt;\!DOCTYPE\ preferences\ SYSTEM\ "http\://java.sun.com/dtd/preferences.dtd"&gt;\r\n\ </pre>\r\n\ (This\ method\ is\ designed\ for\ use\ in\ conjunction\ with\r\n\ {@link\ \#exportNode(OutputStream)}\ and\r\n\ {@link\ \#exportSubtree(OutputStream)}.\r\n\r\n\ <p>This\ method\ is\ an\ exception\ to\ the\ general\ rule\ that\ the\ results\ of\r\n\ concurrently\ executing\ multiple\ methods\ in\ this\ class\ yields\r\n\ results\ equivalent\ to\ some\ serial\ execution.\ \ The\ method\ behaves\r\n\ as\ if\ implemented\ on\ top\ of\ the\ other\ public\ methods\ in\ this\ class,\r\n\ notably\ {@link\ \#node(String)}\ and\ {@link\ \#put(String,\ String)}.\r\n\r\n\ @param\ is\ the\ input\ stream\ from\ which\ to\ read\ the\ XML\ document.\r\n\ @throws\ IOException\ if\ reading\ from\ the\ specified\ input\ stream\r\n\ \ \ \ \ \ \ \ \ results\ in\ an\ <tt>IOException</tt>.\r\n\ @throws\ InvalidPreferencesFormatException\ Data\ on\ input\ stream\ does\ not\r\n\ \ \ \ \ \ \ \ \ constitute\ a\ valid\ XML\ document\ with\ the\ mandated\ document\ type.\r\n\ @throws\ SecurityException\ If\ a\ security\ manager\ is\ present\ and\r\n\ \ \ \ \ \ \ \ \ it\ denies\ <tt>RuntimePermission("preferences")</tt>.\r\n\ @see\ \ \ \ RuntimePermission\r\n
comment5.params=c
comment5.target=java.util.prefs.Preferences\ userNodeForPackage(java.lang.Class)
comment5.text=\r\n\ Returns\ the\ preference\ node\ from\ the\ calling\ user's\ preference\ tree\r\n\ that\ is\ associated\ (by\ convention)\ with\ the\ specified\ class's\ package.\r\n\ The\ convention\ is\ as\ follows\:\ the\ absolute\ path\ name\ of\ the\ node\ is\ the\r\n\ fully\ qualified\ package\ name,\ preceded\ by\ a\ slash\ (<tt>'/'</tt>),\ and\r\n\ with\ each\ period\ (<tt>'.'</tt>)\ replaced\ by\ a\ slash.\ \ For\ example\ the\r\n\ absolute\ path\ name\ of\ the\ node\ associated\ with\ the\ class\r\n\ <tt>com.acme.widget.Foo</tt>\ is\ <tt>/com/acme/widget</tt>.\r\n\r\n\ <p>This\ convention\ does\ not\ apply\ to\ the\ unnamed\ package,\ whose\r\n\ associated\ preference\ node\ is\ <tt>&lt;unnamed&gt;</tt>.\ \ This\ node\r\n\ is\ not\ intended\ for\ long\ term\ use,\ but\ for\ convenience\ in\ the\ early\r\n\ development\ of\ programs\ that\ do\ not\ yet\ belong\ to\ a\ package,\ and\r\n\ for\ "throwaway"\ programs.\ \ <i>Valuable\ data\ should\ not\ be\ stored\r\n\ at\ this\ node\ as\ it\ is\ shared\ by\ all\ programs\ that\ use\ it.</i>\r\n\r\n\ <p>A\ class\ <tt>Foo</tt>\ wishing\ to\ access\ preferences\ pertaining\ to\ its\r\n\ package\ can\ obtain\ a\ preference\ node\ as\ follows\:\ <pre>\r\n\ \ \ \ static\ Preferences\ prefs\ \=\ Preferences.userNodeForPackage(Foo.class);\r\n\ </pre>\r\n\ This\ idiom\ obviates\ the\ need\ for\ using\ a\ string\ to\ describe\ the\r\n\ preferences\ node\ and\ decreases\ the\ likelihood\ of\ a\ run-time\ failure.\r\n\ (If\ the\ class\ name\ is\ misspelled,\ it\ will\ typically\ result\ in\ a\r\n\ compile-time\ error.)\r\n\r\n\ <p>Invoking\ this\ method\ will\ result\ in\ the\ creation\ of\ the\ returned\r\n\ node\ and\ its\ ancestors\ if\ they\ do\ not\ already\ exist.\ \ If\ the\ returned\r\n\ node\ did\ not\ exist\ prior\ to\ this\ call,\ this\ node\ and\ any\ ancestors\ that\r\n\ were\ created\ by\ this\ call\ are\ not\ guaranteed\ to\ become\ permanent\ until\r\n\ the\ <tt>flush</tt>\ method\ is\ called\ on\ the\ returned\ node\ (or\ one\ of\ its\r\n\ ancestors\ or\ descendants).\r\n\r\n\ @param\ c\ the\ class\ for\ whose\ package\ a\ user\ preference\ node\ is\ desired.\r\n\ @return\ the\ user\ preference\ node\ associated\ with\ the\ package\ of\ which\r\n\ \ \ \ \ \ \ \ \ <tt>c</tt>\ is\ a\ member.\r\n\ @throws\ NullPointerException\ if\ <tt>c</tt>\ is\ <tt>null</tt>.\r\n\ @throws\ SecurityException\ if\ a\ security\ manager\ is\ present\ and\r\n\ \ \ \ \ \ \ \ \ it\ denies\ <tt>RuntimePermission("preferences")</tt>.\r\n\ @see\ \ \ \ RuntimePermission\r\n
comment6.params=c
comment6.target=java.util.prefs.Preferences\ systemNodeForPackage(java.lang.Class)
comment6.text=\r\n\ Returns\ the\ preference\ node\ from\ the\ system\ preference\ tree\ that\ is\r\n\ associated\ (by\ convention)\ with\ the\ specified\ class's\ package.\ \ The\r\n\ convention\ is\ as\ follows\:\ the\ absolute\ path\ name\ of\ the\ node\ is\ the\r\n\ fully\ qualified\ package\ name,\ preceded\ by\ a\ slash\ (<tt>'/'</tt>),\ and\r\n\ with\ each\ period\ (<tt>'.'</tt>)\ replaced\ by\ a\ slash.\ \ For\ example\ the\r\n\ absolute\ path\ name\ of\ the\ node\ associated\ with\ the\ class\r\n\ <tt>com.acme.widget.Foo</tt>\ is\ <tt>/com/acme/widget</tt>.\r\n\r\n\ <p>This\ convention\ does\ not\ apply\ to\ the\ unnamed\ package,\ whose\r\n\ associated\ preference\ node\ is\ <tt>&lt;unnamed&gt;</tt>.\ \ This\ node\r\n\ is\ not\ intended\ for\ long\ term\ use,\ but\ for\ convenience\ in\ the\ early\r\n\ development\ of\ programs\ that\ do\ not\ yet\ belong\ to\ a\ package,\ and\r\n\ for\ "throwaway"\ programs.\ \ <i>Valuable\ data\ should\ not\ be\ stored\r\n\ at\ this\ node\ as\ it\ is\ shared\ by\ all\ programs\ that\ use\ it.</i>\r\n\r\n\ <p>A\ class\ <tt>Foo</tt>\ wishing\ to\ access\ preferences\ pertaining\ to\ its\r\n\ package\ can\ obtain\ a\ preference\ node\ as\ follows\:\ <pre>\r\n\ \ static\ Preferences\ prefs\ \=\ Preferences.systemNodeForPackage(Foo.class);\r\n\ </pre>\r\n\ This\ idiom\ obviates\ the\ need\ for\ using\ a\ string\ to\ describe\ the\r\n\ preferences\ node\ and\ decreases\ the\ likelihood\ of\ a\ run-time\ failure.\r\n\ (If\ the\ class\ name\ is\ misspelled,\ it\ will\ typically\ result\ in\ a\r\n\ compile-time\ error.)\r\n\r\n\ <p>Invoking\ this\ method\ will\ result\ in\ the\ creation\ of\ the\ returned\r\n\ node\ and\ its\ ancestors\ if\ they\ do\ not\ already\ exist.\ \ If\ the\ returned\r\n\ node\ did\ not\ exist\ prior\ to\ this\ call,\ this\ node\ and\ any\ ancestors\ that\r\n\ were\ created\ by\ this\ call\ are\ not\ guaranteed\ to\ become\ permanent\ until\r\n\ the\ <tt>flush</tt>\ method\ is\ called\ on\ the\ returned\ node\ (or\ one\ of\ its\r\n\ ancestors\ or\ descendants).\r\n\r\n\ @param\ c\ the\ class\ for\ whose\ package\ a\ system\ preference\ node\ is\ desired.\r\n\ @return\ the\ system\ preference\ node\ associated\ with\ the\ package\ of\ which\r\n\ \ \ \ \ \ \ \ \ <tt>c</tt>\ is\ a\ member.\r\n\ @throws\ NullPointerException\ if\ <tt>c</tt>\ is\ <tt>null</tt>.\r\n\ @throws\ SecurityException\ if\ a\ security\ manager\ is\ present\ and\r\n\ \ \ \ \ \ \ \ \ it\ denies\ <tt>RuntimePermission("preferences")</tt>.\r\n\ @see\ \ \ \ RuntimePermission\r\n
comment7.params=c
comment7.target=java.lang.String\ nodeName(java.lang.Class)
comment7.text=\r\n\ Returns\ the\ absolute\ path\ name\ of\ the\ node\ corresponding\ to\ the\ package\r\n\ of\ the\ specified\ object.\r\n\r\n\ @throws\ IllegalArgumentException\ if\ the\ package\ has\ node\ preferences\r\n\ \ \ \ \ \ \ \ \ node\ associated\ with\ it.\r\n
comment8.params=
comment8.target=java.util.prefs.Preferences\ userRoot()
comment8.text=\r\n\ Returns\ the\ root\ preference\ node\ for\ the\ calling\ user.\r\n\r\n\ @return\ the\ root\ preference\ node\ for\ the\ calling\ user.\r\n\ @throws\ SecurityException\ If\ a\ security\ manager\ is\ present\ and\r\n\ \ \ \ \ \ \ \ \ it\ denies\ <tt>RuntimePermission("preferences")</tt>.\r\n\ @see\ \ \ \ RuntimePermission\r\n
comment9.params=
comment9.target=java.util.prefs.Preferences\ systemRoot()
comment9.text=\r\n\ Returns\ the\ root\ preference\ node\ for\ the\ system.\r\n\r\n\ @return\ the\ root\ preference\ node\ for\ the\ system.\r\n\ @throws\ SecurityException\ If\ a\ security\ manager\ is\ present\ and\r\n\ \ \ \ \ \ \ \ \ it\ denies\ <tt>RuntimePermission("preferences")</tt>.\r\n\ @see\ \ \ \ RuntimePermission\r\n
numComments=46
