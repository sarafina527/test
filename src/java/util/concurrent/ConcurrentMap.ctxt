#BlueJ class context
comment0.target=ConcurrentMap
comment0.text=\r\n\ A\ {@link\ java.util.Map}\ providing\ additional\ atomic\r\n\ <tt>putIfAbsent</tt>,\ <tt>remove</tt>,\ and\ <tt>replace</tt>\ methods.\r\n\r\n\ <p>Memory\ consistency\ effects\:\ As\ with\ other\ concurrent\r\n\ collections,\ actions\ in\ a\ thread\ prior\ to\ placing\ an\ object\ into\ a\r\n\ {@code\ ConcurrentMap}\ as\ a\ key\ or\ value\r\n\ <a\ href\="package-summary.html\#MemoryVisibility"><i>happen-before</i></a>\r\n\ actions\ subsequent\ to\ the\ access\ or\ removal\ of\ that\ object\ from\r\n\ the\ {@code\ ConcurrentMap}\ in\ another\ thread.\r\n\r\n\ <p>This\ interface\ is\ a\ member\ of\ the\r\n\ <a\ href\="{@docRoot}/../technotes/guides/collections/index.html">\r\n\ Java\ Collections\ Framework</a>.\r\n\r\n\ @since\ 1.5\r\n\ @author\ Doug\ Lea\r\n\ @param\ <K>\ the\ type\ of\ keys\ maintained\ by\ this\ map\r\n\ @param\ <V>\ the\ type\ of\ mapped\ values\r\n
comment1.params=key\ value
comment1.target=java.lang.Object\ putIfAbsent(java.lang.Object,\ java.lang.Object)
comment1.text=\r\n\ If\ the\ specified\ key\ is\ not\ already\ associated\r\n\ with\ a\ value,\ associate\ it\ with\ the\ given\ value.\r\n\ This\ is\ equivalent\ to\r\n\ <pre>\r\n\ \ \ if\ (\!map.containsKey(key))\r\n\ \ \ \ \ \ \ return\ map.put(key,\ value);\r\n\ \ \ else\r\n\ \ \ \ \ \ \ return\ map.get(key);</pre>\r\n\ except\ that\ the\ action\ is\ performed\ atomically.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ specified\ value\ is\ to\ be\ associated\r\n\ @param\ value\ value\ to\ be\ associated\ with\ the\ specified\ key\r\n\ @return\ the\ previous\ value\ associated\ with\ the\ specified\ key,\ or\r\n\ \ \ \ \ \ \ \ \ <tt>null</tt>\ if\ there\ was\ no\ mapping\ for\ the\ key.\r\n\ \ \ \ \ \ \ \ \ (A\ <tt>null</tt>\ return\ can\ also\ indicate\ that\ the\ map\r\n\ \ \ \ \ \ \ \ \ previously\ associated\ <tt>null</tt>\ with\ the\ key,\r\n\ \ \ \ \ \ \ \ \ if\ the\ implementation\ supports\ null\ values.)\r\n\ @throws\ UnsupportedOperationException\ if\ the\ <tt>put</tt>\ operation\r\n\ \ \ \ \ \ \ \ \ is\ not\ supported\ by\ this\ map\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ key\ or\ value\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ stored\ in\ this\ map\r\n\ @throws\ NullPointerException\ if\ the\ specified\ key\ or\ value\ is\ null,\r\n\ \ \ \ \ \ \ \ \ and\ this\ map\ does\ not\ permit\ null\ keys\ or\ values\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\ key\r\n\ \ \ \ \ \ \ \ \ or\ value\ prevents\ it\ from\ being\ stored\ in\ this\ map\r\n\r\n
comment2.params=key\ value
comment2.target=boolean\ remove(java.lang.Object,\ java.lang.Object)
comment2.text=\r\n\ Removes\ the\ entry\ for\ a\ key\ only\ if\ currently\ mapped\ to\ a\ given\ value.\r\n\ This\ is\ equivalent\ to\r\n\ <pre>\r\n\ \ \ if\ (map.containsKey(key)\ &amp;&amp;\ map.get(key).equals(value))\ {\r\n\ \ \ \ \ \ \ map.remove(key);\r\n\ \ \ \ \ \ \ return\ true;\r\n\ \ \ }\ else\ return\ false;</pre>\r\n\ except\ that\ the\ action\ is\ performed\ atomically.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ specified\ value\ is\ associated\r\n\ @param\ value\ value\ expected\ to\ be\ associated\ with\ the\ specified\ key\r\n\ @return\ <tt>true</tt>\ if\ the\ value\ was\ removed\r\n\ @throws\ UnsupportedOperationException\ if\ the\ <tt>remove</tt>\ operation\r\n\ \ \ \ \ \ \ \ \ is\ not\ supported\ by\ this\ map\r\n\ @throws\ ClassCastException\ if\ the\ key\ or\ value\ is\ of\ an\ inappropriate\r\n\ \ \ \ \ \ \ \ \ type\ for\ this\ map\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n\ @throws\ NullPointerException\ if\ the\ specified\ key\ or\ value\ is\ null,\r\n\ \ \ \ \ \ \ \ \ and\ this\ map\ does\ not\ permit\ null\ keys\ or\ values\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n
comment3.params=key\ oldValue\ newValue
comment3.target=boolean\ replace(java.lang.Object,\ java.lang.Object,\ java.lang.Object)
comment3.text=\r\n\ Replaces\ the\ entry\ for\ a\ key\ only\ if\ currently\ mapped\ to\ a\ given\ value.\r\n\ This\ is\ equivalent\ to\r\n\ <pre>\r\n\ \ \ if\ (map.containsKey(key)\ &amp;&amp;\ map.get(key).equals(oldValue))\ {\r\n\ \ \ \ \ \ \ map.put(key,\ newValue);\r\n\ \ \ \ \ \ \ return\ true;\r\n\ \ \ }\ else\ return\ false;</pre>\r\n\ except\ that\ the\ action\ is\ performed\ atomically.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ specified\ value\ is\ associated\r\n\ @param\ oldValue\ value\ expected\ to\ be\ associated\ with\ the\ specified\ key\r\n\ @param\ newValue\ value\ to\ be\ associated\ with\ the\ specified\ key\r\n\ @return\ <tt>true</tt>\ if\ the\ value\ was\ replaced\r\n\ @throws\ UnsupportedOperationException\ if\ the\ <tt>put</tt>\ operation\r\n\ \ \ \ \ \ \ \ \ is\ not\ supported\ by\ this\ map\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ a\ specified\ key\ or\ value\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ stored\ in\ this\ map\r\n\ @throws\ NullPointerException\ if\ a\ specified\ key\ or\ value\ is\ null,\r\n\ \ \ \ \ \ \ \ \ and\ this\ map\ does\ not\ permit\ null\ keys\ or\ values\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ a\ specified\ key\r\n\ \ \ \ \ \ \ \ \ or\ value\ prevents\ it\ from\ being\ stored\ in\ this\ map\r\n
comment4.params=key\ value
comment4.target=java.lang.Object\ replace(java.lang.Object,\ java.lang.Object)
comment4.text=\r\n\ Replaces\ the\ entry\ for\ a\ key\ only\ if\ currently\ mapped\ to\ some\ value.\r\n\ This\ is\ equivalent\ to\r\n\ <pre>\r\n\ \ \ if\ (map.containsKey(key))\ {\r\n\ \ \ \ \ \ \ return\ map.put(key,\ value);\r\n\ \ \ }\ else\ return\ null;</pre>\r\n\ except\ that\ the\ action\ is\ performed\ atomically.\r\n\r\n\ @param\ key\ key\ with\ which\ the\ specified\ value\ is\ associated\r\n\ @param\ value\ value\ to\ be\ associated\ with\ the\ specified\ key\r\n\ @return\ the\ previous\ value\ associated\ with\ the\ specified\ key,\ or\r\n\ \ \ \ \ \ \ \ \ <tt>null</tt>\ if\ there\ was\ no\ mapping\ for\ the\ key.\r\n\ \ \ \ \ \ \ \ \ (A\ <tt>null</tt>\ return\ can\ also\ indicate\ that\ the\ map\r\n\ \ \ \ \ \ \ \ \ previously\ associated\ <tt>null</tt>\ with\ the\ key,\r\n\ \ \ \ \ \ \ \ \ if\ the\ implementation\ supports\ null\ values.)\r\n\ @throws\ UnsupportedOperationException\ if\ the\ <tt>put</tt>\ operation\r\n\ \ \ \ \ \ \ \ \ is\ not\ supported\ by\ this\ map\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ key\ or\ value\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ stored\ in\ this\ map\r\n\ @throws\ NullPointerException\ if\ the\ specified\ key\ or\ value\ is\ null,\r\n\ \ \ \ \ \ \ \ \ and\ this\ map\ does\ not\ permit\ null\ keys\ or\ values\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\ key\r\n\ \ \ \ \ \ \ \ \ or\ value\ prevents\ it\ from\ being\ stored\ in\ this\ map\r\n
numComments=5
