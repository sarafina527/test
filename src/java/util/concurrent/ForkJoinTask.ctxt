#BlueJ class context
comment0.target=ForkJoinTask
comment0.text=\r\n\ Abstract\ base\ class\ for\ tasks\ that\ run\ within\ a\ {@link\ ForkJoinPool}.\r\n\ A\ {@code\ ForkJoinTask}\ is\ a\ thread-like\ entity\ that\ is\ much\r\n\ lighter\ weight\ than\ a\ normal\ thread.\ \ Huge\ numbers\ of\ tasks\ and\r\n\ subtasks\ may\ be\ hosted\ by\ a\ small\ number\ of\ actual\ threads\ in\ a\r\n\ ForkJoinPool,\ at\ the\ price\ of\ some\ usage\ limitations.\r\n\r\n\ <p>A\ "main"\ {@code\ ForkJoinTask}\ begins\ execution\ when\ submitted\r\n\ to\ a\ {@link\ ForkJoinPool}.\ \ Once\ started,\ it\ will\ usually\ in\ turn\r\n\ start\ other\ subtasks.\ \ As\ indicated\ by\ the\ name\ of\ this\ class,\r\n\ many\ programs\ using\ {@code\ ForkJoinTask}\ employ\ only\ methods\r\n\ {@link\ \#fork}\ and\ {@link\ \#join},\ or\ derivatives\ such\ as\ {@link\r\n\ \#invokeAll(ForkJoinTask...)\ invokeAll}.\ \ However,\ this\ class\ also\r\n\ provides\ a\ number\ of\ other\ methods\ that\ can\ come\ into\ play\ in\r\n\ advanced\ usages,\ as\ well\ as\ extension\ mechanics\ that\ allow\r\n\ support\ of\ new\ forms\ of\ fork/join\ processing.\r\n\r\n\ <p>A\ {@code\ ForkJoinTask}\ is\ a\ lightweight\ form\ of\ {@link\ Future}.\r\n\ The\ efficiency\ of\ {@code\ ForkJoinTask}s\ stems\ from\ a\ set\ of\r\n\ restrictions\ (that\ are\ only\ partially\ statically\ enforceable)\r\n\ reflecting\ their\ intended\ use\ as\ computational\ tasks\ calculating\r\n\ pure\ functions\ or\ operating\ on\ purely\ isolated\ objects.\ \ The\r\n\ primary\ coordination\ mechanisms\ are\ {@link\ \#fork},\ that\ arranges\r\n\ asynchronous\ execution,\ and\ {@link\ \#join},\ that\ doesn't\ proceed\r\n\ until\ the\ task's\ result\ has\ been\ computed.\ \ Computations\ should\r\n\ avoid\ {@code\ synchronized}\ methods\ or\ blocks,\ and\ should\ minimize\r\n\ other\ blocking\ synchronization\ apart\ from\ joining\ other\ tasks\ or\r\n\ using\ synchronizers\ such\ as\ Phasers\ that\ are\ advertised\ to\r\n\ cooperate\ with\ fork/join\ scheduling.\ Tasks\ should\ also\ not\ perform\r\n\ blocking\ IO,\ and\ should\ ideally\ access\ variables\ that\ are\r\n\ completely\ independent\ of\ those\ accessed\ by\ other\ running\r\n\ tasks.\ Minor\ breaches\ of\ these\ restrictions,\ for\ example\ using\r\n\ shared\ output\ streams,\ may\ be\ tolerable\ in\ practice,\ but\ frequent\r\n\ use\ may\ result\ in\ poor\ performance,\ and\ the\ potential\ to\r\n\ indefinitely\ stall\ if\ the\ number\ of\ threads\ not\ waiting\ for\ IO\ or\r\n\ other\ external\ synchronization\ becomes\ exhausted.\ This\ usage\r\n\ restriction\ is\ in\ part\ enforced\ by\ not\ permitting\ checked\r\n\ exceptions\ such\ as\ {@code\ IOExceptions}\ to\ be\ thrown.\ However,\r\n\ computations\ may\ still\ encounter\ unchecked\ exceptions,\ that\ are\r\n\ rethrown\ to\ callers\ attempting\ to\ join\ them.\ These\ exceptions\ may\r\n\ additionally\ include\ {@link\ RejectedExecutionException}\ stemming\r\n\ from\ internal\ resource\ exhaustion,\ such\ as\ failure\ to\ allocate\r\n\ internal\ task\ queues.\ Rethrown\ exceptions\ behave\ in\ the\ same\ way\ as\r\n\ regular\ exceptions,\ but,\ when\ possible,\ contain\ stack\ traces\ (as\r\n\ displayed\ for\ example\ using\ {@code\ ex.printStackTrace()})\ of\ both\r\n\ the\ thread\ that\ initiated\ the\ computation\ as\ well\ as\ the\ thread\r\n\ actually\ encountering\ the\ exception;\ minimally\ only\ the\ latter.\r\n\r\n\ <p>The\ primary\ method\ for\ awaiting\ completion\ and\ extracting\r\n\ results\ of\ a\ task\ is\ {@link\ \#join},\ but\ there\ are\ several\ variants\:\r\n\ The\ {@link\ Future\#get}\ methods\ support\ interruptible\ and/or\ timed\r\n\ waits\ for\ completion\ and\ report\ results\ using\ {@code\ Future}\r\n\ conventions.\ Method\ {@link\ \#invoke}\ is\ semantically\r\n\ equivalent\ to\ {@code\ fork();\ join()}\ but\ always\ attempts\ to\ begin\r\n\ execution\ in\ the\ current\ thread.\ The\ "<em>quiet</em>"\ forms\ of\r\n\ these\ methods\ do\ not\ extract\ results\ or\ report\ exceptions.\ These\r\n\ may\ be\ useful\ when\ a\ set\ of\ tasks\ are\ being\ executed,\ and\ you\ need\r\n\ to\ delay\ processing\ of\ results\ or\ exceptions\ until\ all\ complete.\r\n\ Method\ {@code\ invokeAll}\ (available\ in\ multiple\ versions)\r\n\ performs\ the\ most\ common\ form\ of\ parallel\ invocation\:\ forking\ a\ set\r\n\ of\ tasks\ and\ joining\ them\ all.\r\n\r\n\ <p>The\ execution\ status\ of\ tasks\ may\ be\ queried\ at\ several\ levels\r\n\ of\ detail\:\ {@link\ \#isDone}\ is\ true\ if\ a\ task\ completed\ in\ any\ way\r\n\ (including\ the\ case\ where\ a\ task\ was\ cancelled\ without\ executing);\r\n\ {@link\ \#isCompletedNormally}\ is\ true\ if\ a\ task\ completed\ without\r\n\ cancellation\ or\ encountering\ an\ exception;\ {@link\ \#isCancelled}\ is\r\n\ true\ if\ the\ task\ was\ cancelled\ (in\ which\ case\ {@link\ \#getException}\r\n\ returns\ a\ {@link\ java.util.concurrent.CancellationException});\ and\r\n\ {@link\ \#isCompletedAbnormally}\ is\ true\ if\ a\ task\ was\ either\r\n\ cancelled\ or\ encountered\ an\ exception,\ in\ which\ case\ {@link\r\n\ \#getException}\ will\ return\ either\ the\ encountered\ exception\ or\r\n\ {@link\ java.util.concurrent.CancellationException}.\r\n\r\n\ <p>The\ ForkJoinTask\ class\ is\ not\ usually\ directly\ subclassed.\r\n\ Instead,\ you\ subclass\ one\ of\ the\ abstract\ classes\ that\ support\ a\r\n\ particular\ style\ of\ fork/join\ processing,\ typically\ {@link\r\n\ RecursiveAction}\ for\ computations\ that\ do\ not\ return\ results,\ or\r\n\ {@link\ RecursiveTask}\ for\ those\ that\ do.\ \ Normally,\ a\ concrete\r\n\ ForkJoinTask\ subclass\ declares\ fields\ comprising\ its\ parameters,\r\n\ established\ in\ a\ constructor,\ and\ then\ defines\ a\ {@code\ compute}\r\n\ method\ that\ somehow\ uses\ the\ control\ methods\ supplied\ by\ this\ base\r\n\ class.\ While\ these\ methods\ have\ {@code\ public}\ access\ (to\ allow\r\n\ instances\ of\ different\ task\ subclasses\ to\ call\ each\ other's\r\n\ methods),\ some\ of\ them\ may\ only\ be\ called\ from\ within\ other\r\n\ ForkJoinTasks\ (as\ may\ be\ determined\ using\ method\ {@link\r\n\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ them\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\r\n\ {@code\ ClassCastException}.\r\n\r\n\ <p>Method\ {@link\ \#join}\ and\ its\ variants\ are\ appropriate\ for\ use\r\n\ only\ when\ completion\ dependencies\ are\ acyclic;\ that\ is,\ the\r\n\ parallel\ computation\ can\ be\ described\ as\ a\ directed\ acyclic\ graph\r\n\ (DAG).\ Otherwise,\ executions\ may\ encounter\ a\ form\ of\ deadlock\ as\r\n\ tasks\ cyclically\ wait\ for\ each\ other.\ \ However,\ this\ framework\r\n\ supports\ other\ methods\ and\ techniques\ (for\ example\ the\ use\ of\r\n\ {@link\ Phaser},\ {@link\ \#helpQuiesce},\ and\ {@link\ \#complete})\ that\r\n\ may\ be\ of\ use\ in\ constructing\ custom\ subclasses\ for\ problems\ that\r\n\ are\ not\ statically\ structured\ as\ DAGs.\r\n\r\n\ <p>Most\ base\ support\ methods\ are\ {@code\ final},\ to\ prevent\r\n\ overriding\ of\ implementations\ that\ are\ intrinsically\ tied\ to\ the\r\n\ underlying\ lightweight\ task\ scheduling\ framework.\ \ Developers\r\n\ creating\ new\ basic\ styles\ of\ fork/join\ processing\ should\ minimally\r\n\ implement\ {@code\ protected}\ methods\ {@link\ \#exec},\ {@link\r\n\ \#setRawResult},\ and\ {@link\ \#getRawResult},\ while\ also\ introducing\r\n\ an\ abstract\ computational\ method\ that\ can\ be\ implemented\ in\ its\r\n\ subclasses,\ possibly\ relying\ on\ other\ {@code\ protected}\ methods\r\n\ provided\ by\ this\ class.\r\n\r\n\ <p>ForkJoinTasks\ should\ perform\ relatively\ small\ amounts\ of\r\n\ computation.\ Large\ tasks\ should\ be\ split\ into\ smaller\ subtasks,\r\n\ usually\ via\ recursive\ decomposition.\ As\ a\ very\ rough\ rule\ of\ thumb,\r\n\ a\ task\ should\ perform\ more\ than\ 100\ and\ less\ than\ 10000\ basic\r\n\ computational\ steps,\ and\ should\ avoid\ indefinite\ looping.\ If\ tasks\r\n\ are\ too\ big,\ then\ parallelism\ cannot\ improve\ throughput.\ If\ too\r\n\ small,\ then\ memory\ and\ internal\ task\ maintenance\ overhead\ may\r\n\ overwhelm\ processing.\r\n\r\n\ <p>This\ class\ provides\ {@code\ adapt}\ methods\ for\ {@link\ Runnable}\r\n\ and\ {@link\ Callable},\ that\ may\ be\ of\ use\ when\ mixing\ execution\ of\r\n\ {@code\ ForkJoinTasks}\ with\ other\ kinds\ of\ tasks.\ When\ all\ tasks\ are\r\n\ of\ this\ form,\ consider\ using\ a\ pool\ constructed\ in\ <em>asyncMode</em>.\r\n\r\n\ <p>ForkJoinTasks\ are\ {@code\ Serializable},\ which\ enables\ them\ to\ be\r\n\ used\ in\ extensions\ such\ as\ remote\ execution\ frameworks.\ It\ is\r\n\ sensible\ to\ serialize\ tasks\ only\ before\ or\ after,\ but\ not\ during,\r\n\ execution.\ Serialization\ is\ not\ relied\ on\ during\ execution\ itself.\r\n\r\n\ @since\ 1.7\r\n\ @author\ Doug\ Lea\r\n
comment1.params=completion
comment1.target=int\ setCompletion(int)
comment1.text=\r\n\ Marks\ completion\ and\ wakes\ up\ threads\ waiting\ to\ join\ this\ task,\r\n\ also\ clearing\ signal\ request\ bits.\r\n\r\n\ @param\ completion\ one\ of\ NORMAL,\ CANCELLED,\ EXCEPTIONAL\r\n\ @return\ completion\ status\ on\ exit\r\n
comment10.params=
comment10.target=java.lang.Throwable\ getThrowableException()
comment10.text=\r\n\ Returns\ a\ rethrowable\ exception\ for\ the\ given\ task,\ if\r\n\ available.\ To\ provide\ accurate\ stack\ traces,\ if\ the\ exception\r\n\ was\ not\ thrown\ by\ the\ current\ thread,\ we\ try\ to\ create\ a\ new\r\n\ exception\ of\ the\ same\ type\ as\ the\ one\ thrown,\ but\ with\ the\r\n\ recorded\ exception\ as\ its\ cause.\ If\ there\ is\ no\ such\r\n\ constructor,\ we\ instead\ try\ to\ use\ a\ no-arg\ constructor,\r\n\ followed\ by\ initCause,\ to\ the\ same\ effect.\ If\ none\ of\ these\r\n\ apply,\ or\ any\ fail\ due\ to\ other\ exceptions,\ we\ return\ the\r\n\ recorded\ exception,\ which\ is\ still\ correct,\ although\ it\ may\r\n\ contain\ a\ misleading\ stack\ trace.\r\n\r\n\ @return\ the\ exception,\ or\ null\ if\ none\r\n
comment11.params=
comment11.target=void\ expungeStaleExceptions()
comment11.text=\r\n\ Poll\ stale\ refs\ and\ remove\ them.\ Call\ only\ while\ holding\ lock.\r\n
comment12.params=
comment12.target=void\ helpExpungeStaleExceptions()
comment12.text=\r\n\ If\ lock\ is\ available,\ poll\ stale\ refs\ and\ remove\ them.\r\n\ Called\ from\ ForkJoinPool\ when\ pools\ become\ quiescent.\r\n
comment13.params=
comment13.target=java.lang.Object\ reportResult()
comment13.text=\r\n\ Report\ the\ result\ of\ invoke\ or\ join;\ called\ only\ upon\r\n\ non-normal\ return\ of\ internal\ versions.\r\n
comment14.params=
comment14.target=java.util.concurrent.ForkJoinTask\ fork()
comment14.text=\r\n\ Arranges\ to\ asynchronously\ execute\ this\ task.\ \ While\ it\ is\ not\r\n\ necessarily\ enforced,\ it\ is\ a\ usage\ error\ to\ fork\ a\ task\ more\r\n\ than\ once\ unless\ it\ has\ completed\ and\ been\ reinitialized.\r\n\ Subsequent\ modifications\ to\ the\ state\ of\ this\ task\ or\ any\ data\r\n\ it\ operates\ on\ are\ not\ necessarily\ consistently\ observable\ by\r\n\ any\ thread\ other\ than\ the\ one\ executing\ it\ unless\ preceded\ by\ a\r\n\ call\ to\ {@link\ \#join}\ or\ related\ methods,\ or\ a\ call\ to\ {@link\r\n\ \#isDone}\ returning\ {@code\ true}.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n\r\n\ @return\ {@code\ this},\ to\ simplify\ usage\r\n
comment15.params=
comment15.target=java.lang.Object\ join()
comment15.text=\r\n\ Returns\ the\ result\ of\ the\ computation\ when\ it\ {@link\ \#isDone\ is\r\n\ done}.\ \ This\ method\ differs\ from\ {@link\ \#get()}\ in\ that\r\n\ abnormal\ completion\ results\ in\ {@code\ RuntimeException}\ or\r\n\ {@code\ Error},\ not\ {@code\ ExecutionException},\ and\ that\r\n\ interrupts\ of\ the\ calling\ thread\ do\ <em>not</em>\ cause\ the\r\n\ method\ to\ abruptly\ return\ by\ throwing\ {@code\r\n\ InterruptedException}.\r\n\r\n\ @return\ the\ computed\ result\r\n
comment16.params=
comment16.target=java.lang.Object\ invoke()
comment16.text=\r\n\ Commences\ performing\ this\ task,\ awaits\ its\ completion\ if\r\n\ necessary,\ and\ returns\ its\ result,\ or\ throws\ an\ (unchecked)\r\n\ {@code\ RuntimeException}\ or\ {@code\ Error}\ if\ the\ underlying\r\n\ computation\ did\ so.\r\n\r\n\ @return\ the\ computed\ result\r\n
comment17.params=t1\ t2
comment17.target=void\ invokeAll(java.util.concurrent.ForkJoinTask,\ java.util.concurrent.ForkJoinTask)
comment17.text=\r\n\ Forks\ the\ given\ tasks,\ returning\ when\ {@code\ isDone}\ holds\ for\r\n\ each\ task\ or\ an\ (unchecked)\ exception\ is\ encountered,\ in\ which\r\n\ case\ the\ exception\ is\ rethrown.\ If\ more\ than\ one\ task\r\n\ encounters\ an\ exception,\ then\ this\ method\ throws\ any\ one\ of\r\n\ these\ exceptions.\ If\ any\ task\ encounters\ an\ exception,\ the\r\n\ other\ may\ be\ cancelled.\ However,\ the\ execution\ status\ of\r\n\ individual\ tasks\ is\ not\ guaranteed\ upon\ exceptional\ return.\ The\r\n\ status\ of\ each\ task\ may\ be\ obtained\ using\ {@link\r\n\ \#getException()}\ and\ related\ methods\ to\ check\ if\ they\ have\ been\r\n\ cancelled,\ completed\ normally\ or\ exceptionally,\ or\ left\r\n\ unprocessed.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n\r\n\ @param\ t1\ the\ first\ task\r\n\ @param\ t2\ the\ second\ task\r\n\ @throws\ NullPointerException\ if\ any\ task\ is\ null\r\n
comment18.params=tasks
comment18.target=void\ invokeAll(java.util.concurrent.ForkJoinTask[])
comment18.text=\r\n\ Forks\ the\ given\ tasks,\ returning\ when\ {@code\ isDone}\ holds\ for\r\n\ each\ task\ or\ an\ (unchecked)\ exception\ is\ encountered,\ in\ which\r\n\ case\ the\ exception\ is\ rethrown.\ If\ more\ than\ one\ task\r\n\ encounters\ an\ exception,\ then\ this\ method\ throws\ any\ one\ of\r\n\ these\ exceptions.\ If\ any\ task\ encounters\ an\ exception,\ others\r\n\ may\ be\ cancelled.\ However,\ the\ execution\ status\ of\ individual\r\n\ tasks\ is\ not\ guaranteed\ upon\ exceptional\ return.\ The\ status\ of\r\n\ each\ task\ may\ be\ obtained\ using\ {@link\ \#getException()}\ and\r\n\ related\ methods\ to\ check\ if\ they\ have\ been\ cancelled,\ completed\r\n\ normally\ or\ exceptionally,\ or\ left\ unprocessed.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n\r\n\ @param\ tasks\ the\ tasks\r\n\ @throws\ NullPointerException\ if\ any\ task\ is\ null\r\n
comment19.params=tasks
comment19.target=java.util.Collection\ invokeAll(java.util.Collection)
comment19.text=\r\n\ Forks\ all\ tasks\ in\ the\ specified\ collection,\ returning\ when\r\n\ {@code\ isDone}\ holds\ for\ each\ task\ or\ an\ (unchecked)\ exception\r\n\ is\ encountered,\ in\ which\ case\ the\ exception\ is\ rethrown.\ If\r\n\ more\ than\ one\ task\ encounters\ an\ exception,\ then\ this\ method\r\n\ throws\ any\ one\ of\ these\ exceptions.\ If\ any\ task\ encounters\ an\r\n\ exception,\ others\ may\ be\ cancelled.\ However,\ the\ execution\r\n\ status\ of\ individual\ tasks\ is\ not\ guaranteed\ upon\ exceptional\r\n\ return.\ The\ status\ of\ each\ task\ may\ be\ obtained\ using\ {@link\r\n\ \#getException()}\ and\ related\ methods\ to\ check\ if\ they\ have\ been\r\n\ cancelled,\ completed\ normally\ or\ exceptionally,\ or\ left\r\n\ unprocessed.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n\r\n\ @param\ tasks\ the\ collection\ of\ tasks\r\n\ @return\ the\ tasks\ argument,\ to\ simplify\ usage\r\n\ @throws\ NullPointerException\ if\ tasks\ or\ any\ element\ are\ null\r\n
comment2.params=millis
comment2.target=void\ tryAwaitDone(long)
comment2.text=\r\n\ Tries\ to\ block\ a\ worker\ thread\ until\ completed\ or\ timed\ out.\r\n\ Uses\ Object.wait\ time\ argument\ conventions.\r\n\ May\ fail\ on\ contention\ or\ interrupt.\r\n\r\n\ @param\ millis\ if\ >\ 0,\ wait\ time.\r\n
comment20.params=mayInterruptIfRunning
comment20.target=boolean\ cancel(boolean)
comment20.text=\r\n\ Attempts\ to\ cancel\ execution\ of\ this\ task.\ This\ attempt\ will\r\n\ fail\ if\ the\ task\ has\ already\ completed\ or\ could\ not\ be\r\n\ cancelled\ for\ some\ other\ reason.\ If\ successful,\ and\ this\ task\r\n\ has\ not\ started\ when\ {@code\ cancel}\ is\ called,\ execution\ of\r\n\ this\ task\ is\ suppressed.\ After\ this\ method\ returns\r\n\ successfully,\ unless\ there\ is\ an\ intervening\ call\ to\ {@link\r\n\ \#reinitialize},\ subsequent\ calls\ to\ {@link\ \#isCancelled},\r\n\ {@link\ \#isDone},\ and\ {@code\ cancel}\ will\ return\ {@code\ true}\r\n\ and\ calls\ to\ {@link\ \#join}\ and\ related\ methods\ will\ result\ in\r\n\ {@code\ CancellationException}.\r\n\r\n\ <p>This\ method\ may\ be\ overridden\ in\ subclasses,\ but\ if\ so,\ must\r\n\ still\ ensure\ that\ these\ properties\ hold.\ In\ particular,\ the\r\n\ {@code\ cancel}\ method\ itself\ must\ not\ throw\ exceptions.\r\n\r\n\ <p>This\ method\ is\ designed\ to\ be\ invoked\ by\ <em>other</em>\r\n\ tasks.\ To\ terminate\ the\ current\ task,\ you\ can\ just\ return\ or\r\n\ throw\ an\ unchecked\ exception\ from\ its\ computation\ method,\ or\r\n\ invoke\ {@link\ \#completeExceptionally}.\r\n\r\n\ @param\ mayInterruptIfRunning\ this\ value\ has\ no\ effect\ in\ the\r\n\ default\ implementation\ because\ interrupts\ are\ not\ used\ to\r\n\ control\ cancellation.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ task\ is\ now\ cancelled\r\n
comment21.params=
comment21.target=void\ cancelIgnoringExceptions()
comment21.text=\r\n\ Cancels,\ ignoring\ any\ exceptions\ thrown\ by\ cancel.\ Used\ during\r\n\ worker\ and\ pool\ shutdown.\ Cancel\ is\ spec'ed\ not\ to\ throw\ any\r\n\ exceptions,\ but\ if\ it\ does\ anyway,\ we\ have\ no\ recourse\ during\r\n\ shutdown,\ so\ guard\ against\ this\ case.\r\n
comment22.params=
comment22.target=boolean\ isDone()
comment23.params=
comment23.target=boolean\ isCancelled()
comment24.params=
comment24.target=boolean\ isCompletedAbnormally()
comment24.text=\r\n\ Returns\ {@code\ true}\ if\ this\ task\ threw\ an\ exception\ or\ was\ cancelled.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ task\ threw\ an\ exception\ or\ was\ cancelled\r\n
comment25.params=
comment25.target=boolean\ isCompletedNormally()
comment25.text=\r\n\ Returns\ {@code\ true}\ if\ this\ task\ completed\ without\ throwing\ an\r\n\ exception\ and\ was\ not\ cancelled.\r\n\r\n\ @return\ {@code\ true}\ if\ this\ task\ completed\ without\ throwing\ an\r\n\ exception\ and\ was\ not\ cancelled\r\n
comment26.params=
comment26.target=java.lang.Throwable\ getException()
comment26.text=\r\n\ Returns\ the\ exception\ thrown\ by\ the\ base\ computation,\ or\ a\r\n\ {@code\ CancellationException}\ if\ cancelled,\ or\ {@code\ null}\ if\r\n\ none\ or\ if\ the\ method\ has\ not\ yet\ completed.\r\n\r\n\ @return\ the\ exception,\ or\ {@code\ null}\ if\ none\r\n
comment27.params=ex
comment27.target=void\ completeExceptionally(java.lang.Throwable)
comment27.text=\r\n\ Completes\ this\ task\ abnormally,\ and\ if\ not\ already\ aborted\ or\r\n\ cancelled,\ causes\ it\ to\ throw\ the\ given\ exception\ upon\r\n\ {@code\ join}\ and\ related\ operations.\ This\ method\ may\ be\ used\r\n\ to\ induce\ exceptions\ in\ asynchronous\ tasks,\ or\ to\ force\r\n\ completion\ of\ tasks\ that\ would\ not\ otherwise\ complete.\ \ Its\ use\r\n\ in\ other\ situations\ is\ discouraged.\ \ This\ method\ is\r\n\ overridable,\ but\ overridden\ versions\ must\ invoke\ {@code\ super}\r\n\ implementation\ to\ maintain\ guarantees.\r\n\r\n\ @param\ ex\ the\ exception\ to\ throw.\ If\ this\ exception\ is\ not\ a\r\n\ {@code\ RuntimeException}\ or\ {@code\ Error},\ the\ actual\ exception\r\n\ thrown\ will\ be\ a\ {@code\ RuntimeException}\ with\ cause\ {@code\ ex}.\r\n
comment28.params=value
comment28.target=void\ complete(java.lang.Object)
comment28.text=\r\n\ Completes\ this\ task,\ and\ if\ not\ already\ aborted\ or\ cancelled,\r\n\ returning\ the\ given\ value\ as\ the\ result\ of\ subsequent\r\n\ invocations\ of\ {@code\ join}\ and\ related\ operations.\ This\ method\r\n\ may\ be\ used\ to\ provide\ results\ for\ asynchronous\ tasks,\ or\ to\r\n\ provide\ alternative\ handling\ for\ tasks\ that\ would\ not\ otherwise\r\n\ complete\ normally.\ Its\ use\ in\ other\ situations\ is\r\n\ discouraged.\ This\ method\ is\ overridable,\ but\ overridden\r\n\ versions\ must\ invoke\ {@code\ super}\ implementation\ to\ maintain\r\n\ guarantees.\r\n\r\n\ @param\ value\ the\ result\ value\ for\ this\ task\r\n
comment29.params=
comment29.target=java.lang.Object\ get()
comment29.text=\r\n\ Waits\ if\ necessary\ for\ the\ computation\ to\ complete,\ and\ then\r\n\ retrieves\ its\ result.\r\n\r\n\ @return\ the\ computed\ result\r\n\ @throws\ CancellationException\ if\ the\ computation\ was\ cancelled\r\n\ @throws\ ExecutionException\ if\ the\ computation\ threw\ an\r\n\ exception\r\n\ @throws\ InterruptedException\ if\ the\ current\ thread\ is\ not\ a\r\n\ member\ of\ a\ ForkJoinPool\ and\ was\ interrupted\ while\ waiting\r\n
comment3.params=
comment3.target=int\ externalAwaitDone()
comment3.text=\r\n\ Blocks\ a\ non-worker-thread\ until\ completion.\r\n\ @return\ status\ upon\ completion\r\n
comment30.params=timeout\ unit
comment30.target=java.lang.Object\ get(long,\ java.util.concurrent.TimeUnit)
comment30.text=\r\n\ Waits\ if\ necessary\ for\ at\ most\ the\ given\ time\ for\ the\ computation\r\n\ to\ complete,\ and\ then\ retrieves\ its\ result,\ if\ available.\r\n\r\n\ @param\ timeout\ the\ maximum\ time\ to\ wait\r\n\ @param\ unit\ the\ time\ unit\ of\ the\ timeout\ argument\r\n\ @return\ the\ computed\ result\r\n\ @throws\ CancellationException\ if\ the\ computation\ was\ cancelled\r\n\ @throws\ ExecutionException\ if\ the\ computation\ threw\ an\r\n\ exception\r\n\ @throws\ InterruptedException\ if\ the\ current\ thread\ is\ not\ a\r\n\ member\ of\ a\ ForkJoinPool\ and\ was\ interrupted\ while\ waiting\r\n\ @throws\ TimeoutException\ if\ the\ wait\ timed\ out\r\n
comment31.params=
comment31.target=void\ quietlyJoin()
comment31.text=\r\n\ Joins\ this\ task,\ without\ returning\ its\ result\ or\ throwing\ its\r\n\ exception.\ This\ method\ may\ be\ useful\ when\ processing\r\n\ collections\ of\ tasks\ when\ some\ have\ been\ cancelled\ or\ otherwise\r\n\ known\ to\ have\ aborted.\r\n
comment32.params=
comment32.target=void\ quietlyInvoke()
comment32.text=\r\n\ Commences\ performing\ this\ task\ and\ awaits\ its\ completion\ if\r\n\ necessary,\ without\ returning\ its\ result\ or\ throwing\ its\r\n\ exception.\r\n
comment33.params=
comment33.target=void\ helpQuiesce()
comment33.text=\r\n\ Possibly\ executes\ tasks\ until\ the\ pool\ hosting\ the\ current\ task\r\n\ {@link\ ForkJoinPool\#isQuiescent\ is\ quiescent}.\ This\ method\ may\r\n\ be\ of\ use\ in\ designs\ in\ which\ many\ tasks\ are\ forked,\ but\ none\r\n\ are\ explicitly\ joined,\ instead\ executing\ them\ until\ all\ are\r\n\ processed.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n
comment34.params=
comment34.target=void\ reinitialize()
comment34.text=\r\n\ Resets\ the\ internal\ bookkeeping\ state\ of\ this\ task,\ allowing\ a\r\n\ subsequent\ {@code\ fork}.\ This\ method\ allows\ repeated\ reuse\ of\r\n\ this\ task,\ but\ only\ if\ reuse\ occurs\ when\ this\ task\ has\ either\r\n\ never\ been\ forked,\ or\ has\ been\ forked,\ then\ completed\ and\ all\r\n\ outstanding\ joins\ of\ this\ task\ have\ also\ completed.\ Effects\r\n\ under\ any\ other\ usage\ conditions\ are\ not\ guaranteed.\r\n\ This\ method\ may\ be\ useful\ when\ executing\r\n\ pre-constructed\ trees\ of\ subtasks\ in\ loops.\r\n\r\n\ <p>Upon\ completion\ of\ this\ method,\ {@code\ isDone()}\ reports\r\n\ {@code\ false},\ and\ {@code\ getException()}\ reports\ {@code\r\n\ null}.\ However,\ the\ value\ returned\ by\ {@code\ getRawResult}\ is\r\n\ unaffected.\ To\ clear\ this\ value,\ you\ can\ invoke\ {@code\r\n\ setRawResult(null)}.\r\n
comment35.params=
comment35.target=java.util.concurrent.ForkJoinPool\ getPool()
comment35.text=\r\n\ Returns\ the\ pool\ hosting\ the\ current\ task\ execution,\ or\ null\r\n\ if\ this\ task\ is\ executing\ outside\ of\ any\ ForkJoinPool.\r\n\r\n\ @see\ \#inForkJoinPool\r\n\ @return\ the\ pool,\ or\ {@code\ null}\ if\ none\r\n
comment36.params=
comment36.target=boolean\ inForkJoinPool()
comment36.text=\r\n\ Returns\ {@code\ true}\ if\ the\ current\ thread\ is\ a\ {@link\r\n\ ForkJoinWorkerThread}\ executing\ as\ a\ ForkJoinPool\ computation.\r\n\r\n\ @return\ {@code\ true}\ if\ the\ current\ thread\ is\ a\ {@link\r\n\ ForkJoinWorkerThread}\ executing\ as\ a\ ForkJoinPool\ computation,\r\n\ or\ {@code\ false}\ otherwise\r\n
comment37.params=
comment37.target=boolean\ tryUnfork()
comment37.text=\r\n\ Tries\ to\ unschedule\ this\ task\ for\ execution.\ This\ method\ will\r\n\ typically\ succeed\ if\ this\ task\ is\ the\ most\ recently\ forked\ task\r\n\ by\ the\ current\ thread,\ and\ has\ not\ commenced\ executing\ in\r\n\ another\ thread.\ \ This\ method\ may\ be\ useful\ when\ arranging\r\n\ alternative\ local\ processing\ of\ tasks\ that\ could\ have\ been,\ but\r\n\ were\ not,\ stolen.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n\r\n\ @return\ {@code\ true}\ if\ unforked\r\n
comment38.params=
comment38.target=int\ getQueuedTaskCount()
comment38.text=\r\n\ Returns\ an\ estimate\ of\ the\ number\ of\ tasks\ that\ have\ been\r\n\ forked\ by\ the\ current\ worker\ thread\ but\ not\ yet\ executed.\ This\r\n\ value\ may\ be\ useful\ for\ heuristic\ decisions\ about\ whether\ to\r\n\ fork\ other\ tasks.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n\r\n\ @return\ the\ number\ of\ tasks\r\n
comment39.params=
comment39.target=int\ getSurplusQueuedTaskCount()
comment39.text=\r\n\ Returns\ an\ estimate\ of\ how\ many\ more\ locally\ queued\ tasks\ are\r\n\ held\ by\ the\ current\ worker\ thread\ than\ there\ are\ other\ worker\r\n\ threads\ that\ might\ steal\ them.\ \ This\ value\ may\ be\ useful\ for\r\n\ heuristic\ decisions\ about\ whether\ to\ fork\ other\ tasks.\ In\ many\r\n\ usages\ of\ ForkJoinTasks,\ at\ steady\ state,\ each\ worker\ should\r\n\ aim\ to\ maintain\ a\ small\ constant\ surplus\ (for\ example,\ 3)\ of\r\n\ tasks,\ and\ to\ process\ computations\ locally\ if\ this\ threshold\ is\r\n\ exceeded.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n\r\n\ @return\ the\ surplus\ number\ of\ tasks,\ which\ may\ be\ negative\r\n
comment4.params=millis
comment4.target=int\ externalInterruptibleAwaitDone(long)
comment4.text=\r\n\ Blocks\ a\ non-worker-thread\ until\ completion\ or\ interruption\ or\ timeout.\r\n
comment40.params=
comment40.target=java.lang.Object\ getRawResult()
comment40.text=\r\n\ Returns\ the\ result\ that\ would\ be\ returned\ by\ {@link\ \#join},\ even\r\n\ if\ this\ task\ completed\ abnormally,\ or\ {@code\ null}\ if\ this\ task\r\n\ is\ not\ known\ to\ have\ been\ completed.\ \ This\ method\ is\ designed\r\n\ to\ aid\ debugging,\ as\ well\ as\ to\ support\ extensions.\ Its\ use\ in\r\n\ any\ other\ context\ is\ discouraged.\r\n\r\n\ @return\ the\ result,\ or\ {@code\ null}\ if\ not\ completed\r\n
comment41.params=value
comment41.target=void\ setRawResult(java.lang.Object)
comment41.text=\r\n\ Forces\ the\ given\ value\ to\ be\ returned\ as\ a\ result.\ \ This\ method\r\n\ is\ designed\ to\ support\ extensions,\ and\ should\ not\ in\ general\ be\r\n\ called\ otherwise.\r\n\r\n\ @param\ value\ the\ value\r\n
comment42.params=
comment42.target=boolean\ exec()
comment42.text=\r\n\ Immediately\ performs\ the\ base\ action\ of\ this\ task.\ \ This\ method\r\n\ is\ designed\ to\ support\ extensions,\ and\ should\ not\ in\ general\ be\r\n\ called\ otherwise.\ The\ return\ value\ controls\ whether\ this\ task\r\n\ is\ considered\ to\ be\ done\ normally.\ It\ may\ return\ false\ in\r\n\ asynchronous\ actions\ that\ require\ explicit\ invocations\ of\r\n\ {@link\ \#complete}\ to\ become\ joinable.\ It\ may\ also\ throw\ an\r\n\ (unchecked)\ exception\ to\ indicate\ abnormal\ exit.\r\n\r\n\ @return\ {@code\ true}\ if\ completed\ normally\r\n
comment43.params=
comment43.target=java.util.concurrent.ForkJoinTask\ peekNextLocalTask()
comment43.text=\r\n\ Returns,\ but\ does\ not\ unschedule\ or\ execute,\ a\ task\ queued\ by\r\n\ the\ current\ thread\ but\ not\ yet\ executed,\ if\ one\ is\ immediately\r\n\ available.\ There\ is\ no\ guarantee\ that\ this\ task\ will\ actually\r\n\ be\ polled\ or\ executed\ next.\ Conversely,\ this\ method\ may\ return\r\n\ null\ even\ if\ a\ task\ exists\ but\ cannot\ be\ accessed\ without\r\n\ contention\ with\ other\ threads.\ \ This\ method\ is\ designed\r\n\ primarily\ to\ support\ extensions,\ and\ is\ unlikely\ to\ be\ useful\r\n\ otherwise.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n\r\n\ @return\ the\ next\ task,\ or\ {@code\ null}\ if\ none\ are\ available\r\n
comment44.params=
comment44.target=java.util.concurrent.ForkJoinTask\ pollNextLocalTask()
comment44.text=\r\n\ Unschedules\ and\ returns,\ without\ executing,\ the\ next\ task\r\n\ queued\ by\ the\ current\ thread\ but\ not\ yet\ executed.\ \ This\ method\r\n\ is\ designed\ primarily\ to\ support\ extensions,\ and\ is\ unlikely\ to\r\n\ be\ useful\ otherwise.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n\r\n\ @return\ the\ next\ task,\ or\ {@code\ null}\ if\ none\ are\ available\r\n
comment45.params=
comment45.target=java.util.concurrent.ForkJoinTask\ pollTask()
comment45.text=\r\n\ Unschedules\ and\ returns,\ without\ executing,\ the\ next\ task\r\n\ queued\ by\ the\ current\ thread\ but\ not\ yet\ executed,\ if\ one\ is\r\n\ available,\ or\ if\ not\ available,\ a\ task\ that\ was\ forked\ by\ some\r\n\ other\ thread,\ if\ available.\ Availability\ may\ be\ transient,\ so\ a\r\n\ {@code\ null}\ result\ does\ not\ necessarily\ imply\ quiescence\r\n\ of\ the\ pool\ this\ task\ is\ operating\ in.\ \ This\ method\ is\ designed\r\n\ primarily\ to\ support\ extensions,\ and\ is\ unlikely\ to\ be\ useful\r\n\ otherwise.\r\n\r\n\ <p>This\ method\ may\ be\ invoked\ only\ from\ within\ {@code\r\n\ ForkJoinPool}\ computations\ (as\ may\ be\ determined\ using\ method\r\n\ {@link\ \#inForkJoinPool}).\ \ Attempts\ to\ invoke\ in\ other\ contexts\r\n\ result\ in\ exceptions\ or\ errors,\ possibly\ including\ {@code\r\n\ ClassCastException}.\r\n\r\n\ @return\ a\ task,\ or\ {@code\ null}\ if\ none\ are\ available\r\n
comment46.params=runnable
comment46.target=java.util.concurrent.ForkJoinTask\ adapt(java.lang.Runnable)
comment46.text=\r\n\ Returns\ a\ new\ {@code\ ForkJoinTask}\ that\ performs\ the\ {@code\ run}\r\n\ method\ of\ the\ given\ {@code\ Runnable}\ as\ its\ action,\ and\ returns\r\n\ a\ null\ result\ upon\ {@link\ \#join}.\r\n\r\n\ @param\ runnable\ the\ runnable\ action\r\n\ @return\ the\ task\r\n
comment47.params=runnable\ result
comment47.target=java.util.concurrent.ForkJoinTask\ adapt(java.lang.Runnable,\ java.lang.Object)
comment47.text=\r\n\ Returns\ a\ new\ {@code\ ForkJoinTask}\ that\ performs\ the\ {@code\ run}\r\n\ method\ of\ the\ given\ {@code\ Runnable}\ as\ its\ action,\ and\ returns\r\n\ the\ given\ result\ upon\ {@link\ \#join}.\r\n\r\n\ @param\ runnable\ the\ runnable\ action\r\n\ @param\ result\ the\ result\ upon\ completion\r\n\ @return\ the\ task\r\n
comment48.params=callable
comment48.target=java.util.concurrent.ForkJoinTask\ adapt(java.util.concurrent.Callable)
comment48.text=\r\n\ Returns\ a\ new\ {@code\ ForkJoinTask}\ that\ performs\ the\ {@code\ call}\r\n\ method\ of\ the\ given\ {@code\ Callable}\ as\ its\ action,\ and\ returns\r\n\ its\ result\ upon\ {@link\ \#join},\ translating\ any\ checked\ exceptions\r\n\ encountered\ into\ {@code\ RuntimeException}.\r\n\r\n\ @param\ callable\ the\ callable\ action\r\n\ @return\ the\ task\r\n
comment49.params=s
comment49.target=void\ writeObject(java.io.ObjectOutputStream)
comment49.text=\r\n\ Saves\ the\ state\ to\ a\ stream\ (that\ is,\ serializes\ it).\r\n\r\n\ @serialData\ the\ current\ run\ status\ and\ the\ exception\ thrown\r\n\ during\ execution,\ or\ {@code\ null}\ if\ none\r\n\ @param\ s\ the\ stream\r\n
comment5.params=
comment5.target=void\ doExec()
comment5.text=\r\n\ Primary\ execution\ method\ for\ stolen\ tasks.\ Unless\ done,\ calls\r\n\ exec\ and\ records\ status\ if\ completed,\ but\ doesn't\ wait\ for\r\n\ completion\ otherwise.\r\n
comment50.params=s
comment50.target=void\ readObject(java.io.ObjectInputStream)
comment50.text=\r\n\ Reconstitutes\ the\ instance\ from\ a\ stream\ (that\ is,\ deserializes\ it).\r\n\r\n\ @param\ s\ the\ stream\r\n
comment6.params=
comment6.target=int\ doJoin()
comment6.text=\r\n\ Primary\ mechanics\ for\ join,\ get,\ quietlyJoin.\r\n\ @return\ status\ upon\ completion\r\n
comment7.params=
comment7.target=int\ doInvoke()
comment7.text=\r\n\ Primary\ mechanics\ for\ invoke,\ quietlyInvoke.\r\n\ @return\ status\ upon\ completion\r\n
comment8.params=ex
comment8.target=int\ setExceptionalCompletion(java.lang.Throwable)
comment8.text=\r\n\ Records\ exception\ and\ sets\ exceptional\ completion.\r\n\r\n\ @return\ status\ on\ exit\r\n
comment9.params=
comment9.target=void\ clearExceptionalCompletion()
comment9.text=\r\n\ Removes\ exception\ node\ and\ clears\ status\r\n
numComments=51
