#BlueJ class context
comment0.target=TransferQueue
comment0.text=\r\n\ A\ {@link\ BlockingQueue}\ in\ which\ producers\ may\ wait\ for\ consumers\r\n\ to\ receive\ elements.\ \ A\ {@code\ TransferQueue}\ may\ be\ useful\ for\r\n\ example\ in\ message\ passing\ applications\ in\ which\ producers\r\n\ sometimes\ (using\ method\ {@link\ \#transfer})\ await\ receipt\ of\r\n\ elements\ by\ consumers\ invoking\ {@code\ take}\ or\ {@code\ poll},\ while\r\n\ at\ other\ times\ enqueue\ elements\ (via\ method\ {@code\ put})\ without\r\n\ waiting\ for\ receipt.\r\n\ {@linkplain\ \#tryTransfer(Object)\ Non-blocking}\ and\r\n\ {@linkplain\ \#tryTransfer(Object,long,TimeUnit)\ time-out}\ versions\ of\r\n\ {@code\ tryTransfer}\ are\ also\ available.\r\n\ A\ {@code\ TransferQueue}\ may\ also\ be\ queried,\ via\ {@link\r\n\ \#hasWaitingConsumer},\ whether\ there\ are\ any\ threads\ waiting\ for\r\n\ items,\ which\ is\ a\ converse\ analogy\ to\ a\ {@code\ peek}\ operation.\r\n\r\n\ <p>Like\ other\ blocking\ queues,\ a\ {@code\ TransferQueue}\ may\ be\r\n\ capacity\ bounded.\ \ If\ so,\ an\ attempted\ transfer\ operation\ may\r\n\ initially\ block\ waiting\ for\ available\ space,\ and/or\ subsequently\r\n\ block\ waiting\ for\ reception\ by\ a\ consumer.\ \ Note\ that\ in\ a\ queue\r\n\ with\ zero\ capacity,\ such\ as\ {@link\ SynchronousQueue},\ {@code\ put}\r\n\ and\ {@code\ transfer}\ are\ effectively\ synonymous.\r\n\r\n\ <p>This\ interface\ is\ a\ member\ of\ the\r\n\ <a\ href\="{@docRoot}/../technotes/guides/collections/index.html">\r\n\ Java\ Collections\ Framework</a>.\r\n\r\n\ @since\ 1.7\r\n\ @author\ Doug\ Lea\r\n\ @param\ <E>\ the\ type\ of\ elements\ held\ in\ this\ collection\r\n
comment1.params=e
comment1.target=boolean\ tryTransfer(java.lang.Object)
comment1.text=\r\n\ Transfers\ the\ element\ to\ a\ waiting\ consumer\ immediately,\ if\ possible.\r\n\r\n\ <p>More\ precisely,\ transfers\ the\ specified\ element\ immediately\r\n\ if\ there\ exists\ a\ consumer\ already\ waiting\ to\ receive\ it\ (in\r\n\ {@link\ \#take}\ or\ timed\ {@link\ \#poll(long,TimeUnit)\ poll}),\r\n\ otherwise\ returning\ {@code\ false}\ without\ enqueuing\ the\ element.\r\n\r\n\ @param\ e\ the\ element\ to\ transfer\r\n\ @return\ {@code\ true}\ if\ the\ element\ was\ transferred,\ else\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n
comment2.params=e
comment2.target=void\ transfer(java.lang.Object)
comment2.text=\r\n\ Transfers\ the\ element\ to\ a\ consumer,\ waiting\ if\ necessary\ to\ do\ so.\r\n\r\n\ <p>More\ precisely,\ transfers\ the\ specified\ element\ immediately\r\n\ if\ there\ exists\ a\ consumer\ already\ waiting\ to\ receive\ it\ (in\r\n\ {@link\ \#take}\ or\ timed\ {@link\ \#poll(long,TimeUnit)\ poll}),\r\n\ else\ waits\ until\ the\ element\ is\ received\ by\ a\ consumer.\r\n\r\n\ @param\ e\ the\ element\ to\ transfer\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting,\r\n\ \ \ \ \ \ \ \ \ in\ which\ case\ the\ element\ is\ not\ left\ enqueued\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n
comment3.params=e\ timeout\ unit
comment3.target=boolean\ tryTransfer(java.lang.Object,\ long,\ java.util.concurrent.TimeUnit)
comment3.text=\r\n\ Transfers\ the\ element\ to\ a\ consumer\ if\ it\ is\ possible\ to\ do\ so\r\n\ before\ the\ timeout\ elapses.\r\n\r\n\ <p>More\ precisely,\ transfers\ the\ specified\ element\ immediately\r\n\ if\ there\ exists\ a\ consumer\ already\ waiting\ to\ receive\ it\ (in\r\n\ {@link\ \#take}\ or\ timed\ {@link\ \#poll(long,TimeUnit)\ poll}),\r\n\ else\ waits\ until\ the\ element\ is\ received\ by\ a\ consumer,\r\n\ returning\ {@code\ false}\ if\ the\ specified\ wait\ time\ elapses\r\n\ before\ the\ element\ can\ be\ transferred.\r\n\r\n\ @param\ e\ the\ element\ to\ transfer\r\n\ @param\ timeout\ how\ long\ to\ wait\ before\ giving\ up,\ in\ units\ of\r\n\ \ \ \ \ \ \ \ {@code\ unit}\r\n\ @param\ unit\ a\ {@code\ TimeUnit}\ determining\ how\ to\ interpret\ the\r\n\ \ \ \ \ \ \ \ {@code\ timeout}\ parameter\r\n\ @return\ {@code\ true}\ if\ successful,\ or\ {@code\ false}\ if\r\n\ \ \ \ \ \ \ \ \ the\ specified\ waiting\ time\ elapses\ before\ completion,\r\n\ \ \ \ \ \ \ \ \ in\ which\ case\ the\ element\ is\ not\ left\ enqueued\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting,\r\n\ \ \ \ \ \ \ \ \ in\ which\ case\ the\ element\ is\ not\ left\ enqueued\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n
comment4.params=
comment4.target=boolean\ hasWaitingConsumer()
comment4.text=\r\n\ Returns\ {@code\ true}\ if\ there\ is\ at\ least\ one\ consumer\ waiting\r\n\ to\ receive\ an\ element\ via\ {@link\ \#take}\ or\r\n\ timed\ {@link\ \#poll(long,TimeUnit)\ poll}.\r\n\ The\ return\ value\ represents\ a\ momentary\ state\ of\ affairs.\r\n\r\n\ @return\ {@code\ true}\ if\ there\ is\ at\ least\ one\ waiting\ consumer\r\n
comment5.params=
comment5.target=int\ getWaitingConsumerCount()
comment5.text=\r\n\ Returns\ an\ estimate\ of\ the\ number\ of\ consumers\ waiting\ to\r\n\ receive\ elements\ via\ {@link\ \#take}\ or\ timed\r\n\ {@link\ \#poll(long,TimeUnit)\ poll}.\ \ The\ return\ value\ is\ an\r\n\ approximation\ of\ a\ momentary\ state\ of\ affairs,\ that\ may\ be\r\n\ inaccurate\ if\ consumers\ have\ completed\ or\ given\ up\ waiting.\r\n\ The\ value\ may\ be\ useful\ for\ monitoring\ and\ heuristics,\ but\r\n\ not\ for\ synchronization\ control.\ \ Implementations\ of\ this\r\n\ method\ are\ likely\ to\ be\ noticeably\ slower\ than\ those\ for\r\n\ {@link\ \#hasWaitingConsumer}.\r\n\r\n\ @return\ the\ number\ of\ consumers\ waiting\ to\ receive\ elements\r\n
numComments=6
