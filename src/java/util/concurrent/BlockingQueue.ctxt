#BlueJ class context
comment0.target=BlockingQueue
comment0.text=\r\n\ A\ {@link\ java.util.Queue}\ that\ additionally\ supports\ operations\r\n\ that\ wait\ for\ the\ queue\ to\ become\ non-empty\ when\ retrieving\ an\r\n\ element,\ and\ wait\ for\ space\ to\ become\ available\ in\ the\ queue\ when\r\n\ storing\ an\ element.\r\n\r\n\ <p><tt>BlockingQueue</tt>\ methods\ come\ in\ four\ forms,\ with\ different\ ways\r\n\ of\ handling\ operations\ that\ cannot\ be\ satisfied\ immediately,\ but\ may\ be\r\n\ satisfied\ at\ some\ point\ in\ the\ future\:\r\n\ one\ throws\ an\ exception,\ the\ second\ returns\ a\ special\ value\ (either\r\n\ <tt>null</tt>\ or\ <tt>false</tt>,\ depending\ on\ the\ operation),\ the\ third\r\n\ blocks\ the\ current\ thread\ indefinitely\ until\ the\ operation\ can\ succeed,\r\n\ and\ the\ fourth\ blocks\ for\ only\ a\ given\ maximum\ time\ limit\ before\ giving\r\n\ up.\ \ These\ methods\ are\ summarized\ in\ the\ following\ table\:\r\n\r\n\ <p>\r\n\ <table\ BORDER\ CELLPADDING\=3\ CELLSPACING\=1>\r\n\ \ <tr>\r\n\ \ \ \ <td></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Throws\ exception</em></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Special\ value</em></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Blocks</em></td>\r\n\ \ \ \ <td\ ALIGN\=CENTER><em>Times\ out</em></td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td><b>Insert</b></td>\r\n\ \ \ \ <td>{@link\ \#add\ add(e)}</td>\r\n\ \ \ \ <td>{@link\ \#offer\ offer(e)}</td>\r\n\ \ \ \ <td>{@link\ \#put\ put(e)}</td>\r\n\ \ \ \ <td>{@link\ \#offer(Object,\ long,\ TimeUnit)\ offer(e,\ time,\ unit)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td><b>Remove</b></td>\r\n\ \ \ \ <td>{@link\ \#remove\ remove()}</td>\r\n\ \ \ \ <td>{@link\ \#poll\ poll()}</td>\r\n\ \ \ \ <td>{@link\ \#take\ take()}</td>\r\n\ \ \ \ <td>{@link\ \#poll(long,\ TimeUnit)\ poll(time,\ unit)}</td>\r\n\ \ </tr>\r\n\ \ <tr>\r\n\ \ \ \ <td><b>Examine</b></td>\r\n\ \ \ \ <td>{@link\ \#element\ element()}</td>\r\n\ \ \ \ <td>{@link\ \#peek\ peek()}</td>\r\n\ \ \ \ <td><em>not\ applicable</em></td>\r\n\ \ \ \ <td><em>not\ applicable</em></td>\r\n\ \ </tr>\r\n\ </table>\r\n\r\n\ <p>A\ <tt>BlockingQueue</tt>\ does\ not\ accept\ <tt>null</tt>\ elements.\r\n\ Implementations\ throw\ <tt>NullPointerException</tt>\ on\ attempts\r\n\ to\ <tt>add</tt>,\ <tt>put</tt>\ or\ <tt>offer</tt>\ a\ <tt>null</tt>.\ \ A\r\n\ <tt>null</tt>\ is\ used\ as\ a\ sentinel\ value\ to\ indicate\ failure\ of\r\n\ <tt>poll</tt>\ operations.\r\n\r\n\ <p>A\ <tt>BlockingQueue</tt>\ may\ be\ capacity\ bounded.\ At\ any\ given\r\n\ time\ it\ may\ have\ a\ <tt>remainingCapacity</tt>\ beyond\ which\ no\r\n\ additional\ elements\ can\ be\ <tt>put</tt>\ without\ blocking.\r\n\ A\ <tt>BlockingQueue</tt>\ without\ any\ intrinsic\ capacity\ constraints\ always\r\n\ reports\ a\ remaining\ capacity\ of\ <tt>Integer.MAX_VALUE</tt>.\r\n\r\n\ <p>\ <tt>BlockingQueue</tt>\ implementations\ are\ designed\ to\ be\ used\r\n\ primarily\ for\ producer-consumer\ queues,\ but\ additionally\ support\r\n\ the\ {@link\ java.util.Collection}\ interface.\ \ So,\ for\ example,\ it\ is\r\n\ possible\ to\ remove\ an\ arbitrary\ element\ from\ a\ queue\ using\r\n\ <tt>remove(x)</tt>.\ However,\ such\ operations\ are\ in\ general\r\n\ <em>not</em>\ performed\ very\ efficiently,\ and\ are\ intended\ for\ only\r\n\ occasional\ use,\ such\ as\ when\ a\ queued\ message\ is\ cancelled.\r\n\r\n\ <p>\ <tt>BlockingQueue</tt>\ implementations\ are\ thread-safe.\ \ All\r\n\ queuing\ methods\ achieve\ their\ effects\ atomically\ using\ internal\r\n\ locks\ or\ other\ forms\ of\ concurrency\ control.\ However,\ the\r\n\ <em>bulk</em>\ Collection\ operations\ <tt>addAll</tt>,\r\n\ <tt>containsAll</tt>,\ <tt>retainAll</tt>\ and\ <tt>removeAll</tt>\ are\r\n\ <em>not</em>\ necessarily\ performed\ atomically\ unless\ specified\r\n\ otherwise\ in\ an\ implementation.\ So\ it\ is\ possible,\ for\ example,\ for\r\n\ <tt>addAll(c)</tt>\ to\ fail\ (throwing\ an\ exception)\ after\ adding\r\n\ only\ some\ of\ the\ elements\ in\ <tt>c</tt>.\r\n\r\n\ <p>A\ <tt>BlockingQueue</tt>\ does\ <em>not</em>\ intrinsically\ support\r\n\ any\ kind\ of\ &quot;close&quot;\ or\ &quot;shutdown&quot;\ operation\ to\r\n\ indicate\ that\ no\ more\ items\ will\ be\ added.\ \ The\ needs\ and\ usage\ of\r\n\ such\ features\ tend\ to\ be\ implementation-dependent.\ For\ example,\ a\r\n\ common\ tactic\ is\ for\ producers\ to\ insert\ special\r\n\ <em>end-of-stream</em>\ or\ <em>poison</em>\ objects,\ that\ are\r\n\ interpreted\ accordingly\ when\ taken\ by\ consumers.\r\n\r\n\ <p>\r\n\ Usage\ example,\ based\ on\ a\ typical\ producer-consumer\ scenario.\r\n\ Note\ that\ a\ <tt>BlockingQueue</tt>\ can\ safely\ be\ used\ with\ multiple\r\n\ producers\ and\ multiple\ consumers.\r\n\ <pre>\r\n\ class\ Producer\ implements\ Runnable\ {\r\n\ \ \ private\ final\ BlockingQueue\ queue;\r\n\ \ \ Producer(BlockingQueue\ q)\ {\ queue\ \=\ q;\ }\r\n\ \ \ public\ void\ run()\ {\r\n\ \ \ \ \ try\ {\r\n\ \ \ \ \ \ \ while\ (true)\ {\ queue.put(produce());\ }\r\n\ \ \ \ \ }\ catch\ (InterruptedException\ ex)\ {\ ...\ handle\ ...}\r\n\ \ \ }\r\n\ \ \ Object\ produce()\ {\ ...\ }\r\n\ }\r\n\r\n\ class\ Consumer\ implements\ Runnable\ {\r\n\ \ \ private\ final\ BlockingQueue\ queue;\r\n\ \ \ Consumer(BlockingQueue\ q)\ {\ queue\ \=\ q;\ }\r\n\ \ \ public\ void\ run()\ {\r\n\ \ \ \ \ try\ {\r\n\ \ \ \ \ \ \ while\ (true)\ {\ consume(queue.take());\ }\r\n\ \ \ \ \ }\ catch\ (InterruptedException\ ex)\ {\ ...\ handle\ ...}\r\n\ \ \ }\r\n\ \ \ void\ consume(Object\ x)\ {\ ...\ }\r\n\ }\r\n\r\n\ class\ Setup\ {\r\n\ \ \ void\ main()\ {\r\n\ \ \ \ \ BlockingQueue\ q\ \=\ new\ SomeQueueImplementation();\r\n\ \ \ \ \ Producer\ p\ \=\ new\ Producer(q);\r\n\ \ \ \ \ Consumer\ c1\ \=\ new\ Consumer(q);\r\n\ \ \ \ \ Consumer\ c2\ \=\ new\ Consumer(q);\r\n\ \ \ \ \ new\ Thread(p).start();\r\n\ \ \ \ \ new\ Thread(c1).start();\r\n\ \ \ \ \ new\ Thread(c2).start();\r\n\ \ \ }\r\n\ }\r\n\ </pre>\r\n\r\n\ <p>Memory\ consistency\ effects\:\ As\ with\ other\ concurrent\r\n\ collections,\ actions\ in\ a\ thread\ prior\ to\ placing\ an\ object\ into\ a\r\n\ {@code\ BlockingQueue}\r\n\ <a\ href\="package-summary.html\#MemoryVisibility"><i>happen-before</i></a>\r\n\ actions\ subsequent\ to\ the\ access\ or\ removal\ of\ that\ element\ from\r\n\ the\ {@code\ BlockingQueue}\ in\ another\ thread.\r\n\r\n\ <p>This\ interface\ is\ a\ member\ of\ the\r\n\ <a\ href\="{@docRoot}/../technotes/guides/collections/index.html">\r\n\ Java\ Collections\ Framework</a>.\r\n\r\n\ @since\ 1.5\r\n\ @author\ Doug\ Lea\r\n\ @param\ <E>\ the\ type\ of\ elements\ held\ in\ this\ collection\r\n
comment1.params=e
comment1.target=boolean\ add(java.lang.Object)
comment1.text=\r\n\ Inserts\ the\ specified\ element\ into\ this\ queue\ if\ it\ is\ possible\ to\ do\r\n\ so\ immediately\ without\ violating\ capacity\ restrictions,\ returning\r\n\ <tt>true</tt>\ upon\ success\ and\ throwing\ an\r\n\ <tt>IllegalStateException</tt>\ if\ no\ space\ is\ currently\ available.\r\n\ When\ using\ a\ capacity-restricted\ queue,\ it\ is\ generally\ preferable\ to\r\n\ use\ {@link\ \#offer(Object)\ offer}.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @return\ <tt>true</tt>\ (as\ specified\ by\ {@link\ Collection\#add})\r\n\ @throws\ IllegalStateException\ if\ the\ element\ cannot\ be\ added\ at\ this\r\n\ \ \ \ \ \ \ \ \ time\ due\ to\ capacity\ restrictions\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n
comment10.params=c
comment10.target=int\ drainTo(java.util.Collection)
comment10.text=\r\n\ Removes\ all\ available\ elements\ from\ this\ queue\ and\ adds\ them\r\n\ to\ the\ given\ collection.\ \ This\ operation\ may\ be\ more\r\n\ efficient\ than\ repeatedly\ polling\ this\ queue.\ \ A\ failure\r\n\ encountered\ while\ attempting\ to\ add\ elements\ to\r\n\ collection\ <tt>c</tt>\ may\ result\ in\ elements\ being\ in\ neither,\r\n\ either\ or\ both\ collections\ when\ the\ associated\ exception\ is\r\n\ thrown.\ \ Attempts\ to\ drain\ a\ queue\ to\ itself\ result\ in\r\n\ <tt>IllegalArgumentException</tt>.\ Further,\ the\ behavior\ of\r\n\ this\ operation\ is\ undefined\ if\ the\ specified\ collection\ is\r\n\ modified\ while\ the\ operation\ is\ in\ progress.\r\n\r\n\ @param\ c\ the\ collection\ to\ transfer\ elements\ into\r\n\ @return\ the\ number\ of\ elements\ transferred\r\n\ @throws\ UnsupportedOperationException\ if\ addition\ of\ elements\r\n\ \ \ \ \ \ \ \ \ is\ not\ supported\ by\ the\ specified\ collection\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ an\ element\ of\ this\ queue\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ the\ specified\ collection\r\n\ @throws\ NullPointerException\ if\ the\ specified\ collection\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ the\ specified\ collection\ is\ this\r\n\ \ \ \ \ \ \ \ \ queue,\ or\ some\ property\ of\ an\ element\ of\ this\ queue\ prevents\r\n\ \ \ \ \ \ \ \ \ it\ from\ being\ added\ to\ the\ specified\ collection\r\n
comment11.params=c\ maxElements
comment11.target=int\ drainTo(java.util.Collection,\ int)
comment11.text=\r\n\ Removes\ at\ most\ the\ given\ number\ of\ available\ elements\ from\r\n\ this\ queue\ and\ adds\ them\ to\ the\ given\ collection.\ \ A\ failure\r\n\ encountered\ while\ attempting\ to\ add\ elements\ to\r\n\ collection\ <tt>c</tt>\ may\ result\ in\ elements\ being\ in\ neither,\r\n\ either\ or\ both\ collections\ when\ the\ associated\ exception\ is\r\n\ thrown.\ \ Attempts\ to\ drain\ a\ queue\ to\ itself\ result\ in\r\n\ <tt>IllegalArgumentException</tt>.\ Further,\ the\ behavior\ of\r\n\ this\ operation\ is\ undefined\ if\ the\ specified\ collection\ is\r\n\ modified\ while\ the\ operation\ is\ in\ progress.\r\n\r\n\ @param\ c\ the\ collection\ to\ transfer\ elements\ into\r\n\ @param\ maxElements\ the\ maximum\ number\ of\ elements\ to\ transfer\r\n\ @return\ the\ number\ of\ elements\ transferred\r\n\ @throws\ UnsupportedOperationException\ if\ addition\ of\ elements\r\n\ \ \ \ \ \ \ \ \ is\ not\ supported\ by\ the\ specified\ collection\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ an\ element\ of\ this\ queue\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ the\ specified\ collection\r\n\ @throws\ NullPointerException\ if\ the\ specified\ collection\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ the\ specified\ collection\ is\ this\r\n\ \ \ \ \ \ \ \ \ queue,\ or\ some\ property\ of\ an\ element\ of\ this\ queue\ prevents\r\n\ \ \ \ \ \ \ \ \ it\ from\ being\ added\ to\ the\ specified\ collection\r\n
comment2.params=e
comment2.target=boolean\ offer(java.lang.Object)
comment2.text=\r\n\ Inserts\ the\ specified\ element\ into\ this\ queue\ if\ it\ is\ possible\ to\ do\r\n\ so\ immediately\ without\ violating\ capacity\ restrictions,\ returning\r\n\ <tt>true</tt>\ upon\ success\ and\ <tt>false</tt>\ if\ no\ space\ is\ currently\r\n\ available.\ \ When\ using\ a\ capacity-restricted\ queue,\ this\ method\ is\r\n\ generally\ preferable\ to\ {@link\ \#add},\ which\ can\ fail\ to\ insert\ an\r\n\ element\ only\ by\ throwing\ an\ exception.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @return\ <tt>true</tt>\ if\ the\ element\ was\ added\ to\ this\ queue,\ else\r\n\ \ \ \ \ \ \ \ \ <tt>false</tt>\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n
comment3.params=e
comment3.target=void\ put(java.lang.Object)
comment3.text=\r\n\ Inserts\ the\ specified\ element\ into\ this\ queue,\ waiting\ if\ necessary\r\n\ for\ space\ to\ become\ available.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n
comment4.params=e\ timeout\ unit
comment4.target=boolean\ offer(java.lang.Object,\ long,\ java.util.concurrent.TimeUnit)
comment4.text=\r\n\ Inserts\ the\ specified\ element\ into\ this\ queue,\ waiting\ up\ to\ the\r\n\ specified\ wait\ time\ if\ necessary\ for\ space\ to\ become\ available.\r\n\r\n\ @param\ e\ the\ element\ to\ add\r\n\ @param\ timeout\ how\ long\ to\ wait\ before\ giving\ up,\ in\ units\ of\r\n\ \ \ \ \ \ \ \ <tt>unit</tt>\r\n\ @param\ unit\ a\ <tt>TimeUnit</tt>\ determining\ how\ to\ interpret\ the\r\n\ \ \ \ \ \ \ \ <tt>timeout</tt>\ parameter\r\n\ @return\ <tt>true</tt>\ if\ successful,\ or\ <tt>false</tt>\ if\r\n\ \ \ \ \ \ \ \ \ the\ specified\ waiting\ time\ elapses\ before\ space\ is\ available\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ @throws\ IllegalArgumentException\ if\ some\ property\ of\ the\ specified\r\n\ \ \ \ \ \ \ \ \ element\ prevents\ it\ from\ being\ added\ to\ this\ queue\r\n
comment5.params=
comment5.target=java.lang.Object\ take()
comment5.text=\r\n\ Retrieves\ and\ removes\ the\ head\ of\ this\ queue,\ waiting\ if\ necessary\r\n\ until\ an\ element\ becomes\ available.\r\n\r\n\ @return\ the\ head\ of\ this\ queue\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n
comment6.params=timeout\ unit
comment6.target=java.lang.Object\ poll(long,\ java.util.concurrent.TimeUnit)
comment6.text=\r\n\ Retrieves\ and\ removes\ the\ head\ of\ this\ queue,\ waiting\ up\ to\ the\r\n\ specified\ wait\ time\ if\ necessary\ for\ an\ element\ to\ become\ available.\r\n\r\n\ @param\ timeout\ how\ long\ to\ wait\ before\ giving\ up,\ in\ units\ of\r\n\ \ \ \ \ \ \ \ <tt>unit</tt>\r\n\ @param\ unit\ a\ <tt>TimeUnit</tt>\ determining\ how\ to\ interpret\ the\r\n\ \ \ \ \ \ \ \ <tt>timeout</tt>\ parameter\r\n\ @return\ the\ head\ of\ this\ queue,\ or\ <tt>null</tt>\ if\ the\r\n\ \ \ \ \ \ \ \ \ specified\ waiting\ time\ elapses\ before\ an\ element\ is\ available\r\n\ @throws\ InterruptedException\ if\ interrupted\ while\ waiting\r\n
comment7.params=
comment7.target=int\ remainingCapacity()
comment7.text=\r\n\ Returns\ the\ number\ of\ additional\ elements\ that\ this\ queue\ can\ ideally\r\n\ (in\ the\ absence\ of\ memory\ or\ resource\ constraints)\ accept\ without\r\n\ blocking,\ or\ <tt>Integer.MAX_VALUE</tt>\ if\ there\ is\ no\ intrinsic\r\n\ limit.\r\n\r\n\ <p>Note\ that\ you\ <em>cannot</em>\ always\ tell\ if\ an\ attempt\ to\ insert\r\n\ an\ element\ will\ succeed\ by\ inspecting\ <tt>remainingCapacity</tt>\r\n\ because\ it\ may\ be\ the\ case\ that\ another\ thread\ is\ about\ to\r\n\ insert\ or\ remove\ an\ element.\r\n\r\n\ @return\ the\ remaining\ capacity\r\n
comment8.params=o
comment8.target=boolean\ remove(java.lang.Object)
comment8.text=\r\n\ Removes\ a\ single\ instance\ of\ the\ specified\ element\ from\ this\ queue,\r\n\ if\ it\ is\ present.\ \ More\ formally,\ removes\ an\ element\ <tt>e</tt>\ such\r\n\ that\ <tt>o.equals(e)</tt>,\ if\ this\ queue\ contains\ one\ or\ more\ such\r\n\ elements.\r\n\ Returns\ <tt>true</tt>\ if\ this\ queue\ contained\ the\ specified\ element\r\n\ (or\ equivalently,\ if\ this\ queue\ changed\ as\ a\ result\ of\ the\ call).\r\n\r\n\ @param\ o\ element\ to\ be\ removed\ from\ this\ queue,\ if\ present\r\n\ @return\ <tt>true</tt>\ if\ this\ queue\ changed\ as\ a\ result\ of\ the\ call\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ is\ incompatible\ with\ this\ queue\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n
comment9.params=o
comment9.target=boolean\ contains(java.lang.Object)
comment9.text=\r\n\ Returns\ <tt>true</tt>\ if\ this\ queue\ contains\ the\ specified\ element.\r\n\ More\ formally,\ returns\ <tt>true</tt>\ if\ and\ only\ if\ this\ queue\ contains\r\n\ at\ least\ one\ element\ <tt>e</tt>\ such\ that\ <tt>o.equals(e)</tt>.\r\n\r\n\ @param\ o\ object\ to\ be\ checked\ for\ containment\ in\ this\ queue\r\n\ @return\ <tt>true</tt>\ if\ this\ queue\ contains\ the\ specified\ element\r\n\ @throws\ ClassCastException\ if\ the\ class\ of\ the\ specified\ element\r\n\ \ \ \ \ \ \ \ \ is\ incompatible\ with\ this\ queue\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n\ @throws\ NullPointerException\ if\ the\ specified\ element\ is\ null\r\n\ \ \ \ \ \ \ \ \ (<a\ href\="../Collection.html\#optional-restrictions">optional</a>)\r\n
numComments=12
